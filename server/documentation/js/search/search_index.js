var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Allocation.html",[0,1.709,1,0.462]],["body/entities/Allocation.html",[0,2.689,1,0.926,2,1.971,3,0.317,4,0.268,5,0.268,6,2.592,7,0.367,8,0.496,9,0.642,10,2.22,11,0.611,12,1.602,13,1.075,14,1.254,15,2.22,16,0.661,17,0.038,18,1.214,19,1.292,20,4.231,21,0.838,22,3.133,23,3.133,24,3.133,25,1.523,26,1.075,27,3.133,28,1.933,29,3.133,30,2.592,31,3.133,32,1.202,33,2.592,34,3.133,35,1.759,36,1.753,37,1.753,38,1.594,39,1.753,40,1.971,41,3.133,42,1.753,43,0.484,44,2.019,45,3.502,46,4.231,47,0.89,48,1.604,49,3.502,50,1.458,51,0.596,52,1.759,53,3.133,54,3.133,55,2.592,56,0.317,57,0.178,58,1.18,59,3.133,60,0.025,61,0.025]],["title/classes/AllocationExistsInput.html",[57,0.173,62,1.044]],["body/classes/AllocationExistsInput.html",[1,0.938,3,0.235,4,0.199,5,0.199,7,0.272,8,0.272,9,0.52,10,2.203,11,0.537,12,1.695,13,1.133,14,1.31,15,2.203,16,0.587,17,0.038,18,1.269,19,0.802,21,0.52,25,1.542,26,1.034,28,2.004,32,1.361,36,1.861,37,1.861,38,1.692,39,1.861,42,1.861,43,0.346,44,1.804,47,0.66,48,1.727,50,1.664,51,0.443,56,0.523,57,0.294,58,1.692,60,0.02,61,0.02,62,1.175,63,0.6,64,0.963,65,1.012,66,1.858,67,1.984,68,1.533,69,1.42,70,2.324,71,2.324,72,1.824,73,0.66,74,0.6,75,0.974,76,0.6,77,0.6,78,0.66,79,0.726,80,0.963,81,0.66,82,0.963,83,0.66,84,0.797]],["title/modules/AllocationModule.html",[85,1.537,86,1.537]],["body/modules/AllocationModule.html",[1,0.605,3,0.403,4,0.341,5,0.341,17,0.037,43,0.604,56,0.403,57,0.226,60,0.029,61,0.029,85,2.497,86,3.073,87,2.012,88,2.497,89,3.298,90,3.298,91,3.298,92,2.564,93,2.975,94,3.111,95,2.507,96,2.507,97,3.985,98,4.092,99,4.092,100,3.111,101,1.651,102,2.845,103,2.507,104,3.298,105,2.497,106,3.298,107,2.845,108,3.298,109,3.111,110,3.985,111,2.845,112,3.985]],["title/classes/AllocationNameExistsInput.html",[57,0.173,84,1.044]],["body/classes/AllocationNameExistsInput.html",[1,0.938,3,0.235,4,0.199,5,0.199,7,0.272,8,0.272,9,0.52,10,2.203,11,0.537,12,1.695,13,1.115,14,1.361,15,2.203,16,0.587,17,0.038,18,1.264,19,0.802,21,0.52,25,1.542,26,1.034,28,2.004,32,1.424,36,1.861,37,1.861,38,1.692,39,1.861,42,1.861,43,0.346,44,1.804,47,0.66,48,1.731,50,1.664,51,0.443,56,0.523,57,0.294,58,1.692,60,0.02,61,0.02,62,0.797,63,0.6,64,0.963,65,1.012,66,1.858,67,1.861,68,1.533,69,0.963,72,1.824,73,0.66,74,0.6,75,0.974,76,0.6,77,0.6,78,0.66,79,0.726,80,0.963,81,0.66,82,0.963,83,0.66,84,1.175,113,2.324,114,2.324]],["title/injectables/AllocationRepository.html",[93,1.537,115,1.147]],["body/injectables/AllocationRepository.html",[1,0.939,3,0.252,4,0.363,5,0.214,7,0.635,8,0.292,9,0.548,12,0.779,13,0.475,14,1.24,16,0.635,17,0.038,21,0.823,43,0.469,47,0.709,56,0.252,57,0.142,60,0.021,61,0.021,65,1.069,74,1.326,76,0.932,77,1.199,78,1.46,79,1.604,81,1.505,83,1.46,93,1.822,101,1.034,107,1.782,115,1.36,116,1.401,117,2.065,118,3.15,119,2.667,120,1.822,121,2.987,122,3.303,123,3.609,124,2.987,125,3.609,126,2.987,127,3.609,128,2.141,129,2.065,130,4.383,131,3.609,132,2.675,133,1.817,134,2.987,135,1.822,136,3.609,137,2.496,138,1.822,139,4.101,140,2.901,141,1.822,142,3.609,143,2.496,144,2.577,145,4.645,146,3.609,147,2.496,148,3.844,149,2.594,150,3.844,151,3.609,152,2.496,153,2.987,154,2.987,155,3.609,156,2.496,157,2.987,158,2.987,159,3.609,160,2.496,161,2.577,162,1.782,163,2.675,164,1.57,165,2.065,166,2.496,167,2.121,168,2.496,169,2.766,170,2.496,171,2.496,172,2.496,173,2.496,174,2.065,175,2.065,176,2.496]],["title/classes/AllocationResolver.html",[57,0.173,109,1.915]],["body/classes/AllocationResolver.html",[1,0.931,3,0.246,4,0.209,5,0.209,7,0.596,8,0.285,11,0.578,14,1.23,16,0.616,17,0.038,18,0.515,19,1.192,21,0.798,26,0.675,43,0.493,51,0.463,52,1.366,56,0.246,57,0.138,60,0.021,61,0.021,63,0.628,65,1.026,74,1.357,76,0.915,77,1.49,78,1.676,81,1.447,83,1.447,92,2.178,107,1.738,109,2.229,120,1.789,128,2.11,132,2.654,133,1.803,135,1.789,138,1.789,140,2.887,141,1.789,144,2.53,149,2.887,161,2.53,162,1.738,163,2.654,164,1.531,167,2.325,177,2.014,178,4.458,179,4.179,180,3.459,181,3.459,182,3.459,183,2.434,184,2.434,185,2.229,186,2.434,187,2.933,188,2.434,189,2.888,190,3.278,191,2.434,192,2.434,193,3.799,194,3.799,195,2.014,196,3.459,197,2.434,198,2.434,199,2.014,200,2.434,201,2.014,202,2.434,203,2.933,204,2.933,205,2.014,206,2.434,207,2.933,208,3.459,209,3.799,210,2.014,211,2.014,212,2.933,213,2.434,214,2.434,215,2.434,216,2.434,217,2.434,218,2.434,219,2.434,220,2.434,221,2.434,222,2.434,223,2.434,224,2.434,225,2.434,226,2.434]],["title/injectables/AllocationService.html",[92,1.262,115,1.147]],["body/injectables/AllocationService.html",[1,0.926,3,0.159,4,0.135,5,0.135,7,0.581,8,0.184,9,0.385,11,0.512,12,1.25,13,0.999,14,1.298,16,0.594,17,0.038,18,0.673,21,0.769,26,0.92,43,0.454,52,0.883,56,0.159,57,0.089,60,0.015,61,0.015,62,1.657,65,1.026,68,2.005,73,0.447,74,1.161,76,0.654,77,1.333,78,1.491,79,1.405,80,0.652,81,1.278,82,0.652,83,1.278,84,1.543,92,1.05,93,2.271,100,0.99,101,0.652,108,1.302,115,0.955,116,0.883,118,1.423,119,2.518,120,1.28,122,3.276,128,1.843,132,2.504,133,1.701,135,1.28,138,1.28,140,2.801,141,1.28,144,1.81,149,2.801,161,1.81,162,1.123,163,2.504,167,2.314,169,2.899,174,2.098,175,2.634,180,2.634,181,2.634,182,2.634,185,2.296,189,2.691,193,3.722,194,3.02,195,1.302,201,1.302,203,2.098,204,2.098,205,1.302,207,2.098,227,1.302,228,3.722,229,4.498,230,3.183,231,2.634,232,3.183,233,2.098,234,3.183,235,1.574,236,2.136,237,2.535,238,1.574,239,1.574,240,3.02,241,3.539,242,3.02,243,1.574,244,1.574,245,1.574,246,1.574,247,1.574,248,1.574,249,1.574,250,1.574,251,2.535,252,1.574,253,1.574,254,1.574,255,1.574,256,1.302,257,0.883,258,3.211,259,0.99,260,0.883,261,0.99,262,1.302,263,1.574,264,1.302,265,1.302,266,2.946,267,3.448,268,3.539,269,3.183,270,3.183,271,3.687,272,3.312,273,2.535,274,1.574,275,2.535,276,1.302,277,3.539,278,1.574,279,3.539,280,3.539,281,3.539,282,3.687,283,3.053,284,1.574,285,1.302,286,1.574,287,1.574,288,2.098,289,1.574,290,1.574,291,1.574,292,1.574,293,1.574,294,1.574,295,1.574,296,2.535,297,1.574,298,2.535,299,1.574,300,1.574,301,3.183,302,1.574,303,1.574,304,2.535,305,2.535,306,1.574]],["title/modules/AppModule.html",[85,1.537,307,1.915]],["body/modules/AppModule.html",[1,0.726,2,2.377,3,0.382,4,0.324,5,0.324,11,0.483,16,0.442,17,0.037,26,0.719,43,0.609,51,0.719,52,2.121,56,0.382,57,0.214,60,0.028,61,0.028,85,2.415,86,2.935,87,1.908,88,2.415,94,3.009,95,2.377,96,2.377,101,1.565,102,2.697,103,2.377,105,2.935,106,3.126,111,3.415,139,2.697,167,1.725,257,2.121,266,2.121,282,2.697,307,3.759,308,3.126,309,3.126,310,3.778,311,3.126,312,3.778,313,4.783,314,3.778,315,3.126,316,3.126,317,3.778,318,3.778,319,3.778,320,3.778,321,3.778,322,3.778,323,3.778,324,1.908,325,4.783,326,3.778,327,3.778,328,3.778,329,3.778,330,3.778,331,3.778,332,3.778,333,3.778,334,3.778,335,3.778]],["title/classes/CreateAllocationInput.html",[57,0.173,74,0.786]],["body/classes/CreateAllocationInput.html",[1,0.938,3,0.227,4,0.193,5,0.193,7,0.263,8,0.263,9,0.508,10,2.303,11,0.532,12,1.681,13,1.109,14,1.343,15,2.303,16,0.617,17,0.038,18,1.269,19,1.034,21,0.671,25,1.529,26,1.025,28,1.985,32,1.407,35,1.263,36,1.957,37,1.957,38,1.78,39,1.957,42,1.957,43,0.338,44,1.78,47,0.639,48,1.726,50,1.655,51,0.428,56,0.518,57,0.291,58,1.666,60,0.02,61,0.02,62,0.772,63,0.581,64,0.932,65,1.003,66,1.527,67,1.832,68,1.26,69,1.386,72,1.807,73,0.95,74,0.863,75,0.95,76,0.581,77,0.581,78,0.639,79,0.703,80,0.932,81,0.639,82,0.932,83,0.639,84,0.772,336,2.25,337,2.25,338,2.25,339,2.25,340,2.25]],["title/classes/CreateCustomerInput.html",[57,0.173,341,1.262]],["body/classes/CreateCustomerInput.html",[3,0.399,4,0.339,5,0.339,7,0.463,8,0.463,9,0.747,11,0.609,13,0.937,16,0.463,17,0.038,18,0.836,19,0.925,21,0.6,25,1.123,26,0.753,32,1.522,43,0.399,48,1.639,50,1.398,51,0.753,56,0.541,57,0.304,60,0.029,61,0.029,63,1.02,65,1.068,72,1.923,73,1.398,75,1.398,324,3.043,341,2.039,342,2.487,343,3.953,344,1.638,345,1.805]],["title/entities/Customer.html",[0,1.709,11,0.308]],["body/entities/Customer.html",[0,3.068,1,0.891,2,2.319,3,0.372,4,0.316,5,0.316,7,0.432,8,0.551,9,0.715,11,0.611,13,1.075,16,0.608,17,0.037,18,0.996,19,1.214,21,0.787,25,1.338,26,0.988,28,1.774,30,3.05,32,1.338,33,3.05,43,0.524,44,1.774,45,3.896,47,1.047,48,1.553,49,3.896,50,1.338,51,0.702,55,3.05,56,0.372,57,0.209,60,0.028,61,0.028,77,1.458,133,1.615,257,2.069,324,2.852,346,3.05,347,3.686,348,3.686,349,3.686,350,3.686,351,3.686,352,4.708,353,3.686,354,3.686]],["title/modules/CustomerModule.html",[85,1.537,105,1.537]],["body/modules/CustomerModule.html",[3,0.403,4,0.341,5,0.341,11,0.403,17,0.037,43,0.604,56,0.403,57,0.226,60,0.029,61,0.029,85,2.497,86,2.497,87,2.012,88,2.497,94,3.111,95,2.507,96,2.507,98,4.092,99,4.092,100,3.111,101,1.651,102,2.845,103,2.507,105,3.073,111,2.845,236,2.826,262,3.298,311,3.298,355,3.298,356,3.298,357,3.298,358,2.975,359,3.985,360,2.845,361,3.298,362,3.111,363,3.985,364,3.985]],["title/injectables/CustomerRepository.html",[115,1.147,358,1.537]],["body/injectables/CustomerRepository.html",[3,0.29,4,0.392,5,0.246,7,0.609,8,0.336,9,0.605,11,0.628,14,1.158,16,0.609,17,0.037,21,0.816,43,0.5,47,0.816,56,0.29,57,0.163,60,0.023,61,0.023,65,0.942,76,1.029,101,1.19,115,1.502,116,1.612,118,3.246,119,2.881,120,2.013,121,3.299,122,3.206,124,3.789,126,3.299,128,2.312,129,2.376,130,4.565,132,2.498,133,1.697,134,3.299,135,2.013,138,2.013,139,4.015,140,2.84,141,2.013,148,4.093,149,2.716,150,4.093,153,3.299,154,3.299,157,3.299,158,3.299,163,2.498,164,1.806,165,2.376,167,2.259,169,2.57,341,2.229,344,2.286,345,2.259,358,2.013,360,2.05,365,2.376,366,4.947,367,3.986,368,3.986,369,2.872,370,2.872,371,2.872,372,2.872,373,3.532,374,3.986,375,2.872,376,2.05,377,2.872,378,2.872,379,2.872,380,2.872,381,2.872]],["title/classes/CustomerResolver.html",[57,0.173,362,1.915]],["body/classes/CustomerResolver.html",[1,0.596,3,0.284,4,0.241,5,0.241,7,0.53,8,0.329,11,0.634,13,0.535,14,1.147,16,0.574,17,0.038,19,1.147,21,0.783,43,0.54,51,0.535,56,0.284,57,0.16,60,0.023,61,0.023,63,0.725,65,0.862,67,1.627,74,0.725,76,1.265,77,1.265,92,1.164,120,1.983,122,2.998,128,2.285,132,2.474,133,1.681,135,1.419,138,1.983,140,2.824,141,1.983,149,2.824,163,2.474,164,1.768,167,2.238,169,1.577,178,4.421,185,1.768,187,3.249,189,3.36,190,2.803,196,2.325,199,2.325,208,3.746,209,3.249,210,2.325,211,2.325,212,3.249,236,2.439,257,1.577,258,2.803,259,1.768,260,1.577,261,1.768,266,1.577,267,2.006,271,2.006,272,2.325,341,2.213,344,2.272,360,2.006,362,2.47,373,3.994,376,2.006,382,2.325,383,3.746,384,2.81,385,2.81,386,2.81,387,2.81,388,3.927,389,2.325,390,2.81,391,2.81,392,2.81,393,2.81,394,2.81,395,2.81,396,2.81,397,2.81,398,2.81,399,2.81,400,2.325,401,2.81,402,2.81,403,2.81]],["title/injectables/CustomerService.html",[115,1.147,236,1.39]],["body/injectables/CustomerService.html",[1,0.321,3,0.214,4,0.181,5,0.181,7,0.588,8,0.248,9,0.485,11,0.627,12,1.339,13,0.733,14,1.133,16,0.588,17,0.038,18,0.814,21,0.785,26,0.921,43,0.508,52,1.188,56,0.214,57,0.12,60,0.019,61,0.019,65,0.985,68,1.995,73,0.601,75,0.601,76,1.107,77,1.107,92,2.143,100,1.331,101,0.877,104,1.751,115,1.204,116,1.188,118,1.793,119,2.895,120,1.613,122,3.279,128,2.165,132,2.443,133,1.66,135,1.613,138,1.613,140,2.804,141,1.613,149,2.804,163,2.443,167,2.362,169,2.407,185,2.697,189,3.044,190,2.281,228,4.157,231,2.644,233,2.644,236,1.459,240,3.548,241,4.005,242,3.548,256,1.751,257,1.188,258,2.281,259,1.331,260,1.188,261,1.331,264,1.751,265,1.751,266,2.716,267,2.748,268,2.644,271,3.286,276,1.751,277,3.548,279,3.548,280,3.548,281,3.548,282,3.455,283,3.061,285,1.751,288,1.751,324,2.537,341,2.082,344,2.271,345,2.362,358,2.537,361,1.751,373,3.286,376,1.511,383,3.185,389,1.751,400,1.751,404,1.751,405,4.288,406,4.602,407,2.116,408,3.195,409,2.116,410,3.195,411,2.116,412,2.116,413,3.195,414,2.116,415,3.195,416,2.116,417,2.116,418,2.116,419,2.116,420,2.116,421,3.195,422,2.116,423,2.116,424,2.116,425,2.116,426,2.116,427,3.195,428,2.116,429,2.116]],["title/classes/DeleteAllocationInput.html",[57,0.173,83,0.865]],["body/classes/DeleteAllocationInput.html",[1,0.938,3,0.235,4,0.199,5,0.199,7,0.273,8,0.273,9,0.52,10,2.204,11,0.537,12,1.696,13,1.133,14,1.31,15,2.204,16,0.587,17,0.038,18,1.269,19,0.803,21,0.52,25,1.543,26,1.034,28,2.004,32,1.361,36,1.862,37,1.862,38,1.693,39,1.862,42,1.862,43,0.346,44,1.805,47,0.661,48,1.727,50,1.664,51,0.443,56,0.524,57,0.294,58,1.693,60,0.02,61,0.02,62,0.798,63,0.601,64,0.964,65,1.013,66,1.566,67,1.985,68,1.292,69,1.421,72,1.824,73,0.661,74,0.601,75,0.974,76,0.601,77,0.601,78,0.661,79,0.727,80,0.964,81,0.661,82,1.421,83,0.974,84,0.798,430,2.327,431,2.327]],["title/classes/GetAllocationInput.html",[57,0.173,79,0.951]],["body/classes/GetAllocationInput.html",[1,0.938,3,0.221,4,0.188,5,0.188,7,0.257,8,0.257,9,0.498,10,2.289,11,0.528,12,1.669,13,1.124,14,1.337,15,2.289,16,0.626,17,0.038,18,1.269,19,1.093,21,0.709,25,1.546,26,1.065,28,1.97,32,1.393,35,1.23,36,1.936,37,1.936,38,1.761,39,1.936,40,1.379,42,1.936,43,0.331,44,1.761,47,0.623,48,1.716,50,1.648,51,0.417,56,0.514,57,0.289,58,1.644,60,0.019,61,0.019,62,0.752,63,0.566,64,0.908,65,0.995,66,1.498,67,1.936,68,1.236,69,1.629,72,1.793,73,0.623,74,0.566,75,1.117,76,0.566,77,0.566,78,0.623,79,1.024,80,0.908,81,0.623,82,0.908,83,0.623,84,0.752,133,1.682,432,2.192,433,2.192,434,2.192,435,1.565,436,2.192,437,2.192]],["title/classes/GetAllocationsInput.html",[57,0.173,78,0.865]],["body/classes/GetAllocationsInput.html",[1,0.936,3,0.224,4,0.19,5,0.19,7,0.26,8,0.26,9,0.503,10,2.296,11,0.53,12,1.675,13,1.107,14,1.34,15,2.296,16,0.615,17,0.038,18,1.267,19,1.028,21,0.667,25,1.552,26,1.069,28,1.977,32,1.4,35,1.247,36,1.947,37,1.947,38,1.771,39,1.947,40,1.398,42,1.947,43,0.335,44,1.771,47,0.631,48,1.719,50,1.652,51,0.423,56,0.516,57,0.29,58,1.655,60,0.019,61,0.019,62,0.762,63,0.574,64,0.921,65,0.999,66,1.513,67,1.82,68,1.249,69,1.373,72,1.8,73,0.631,74,0.574,75,1.126,76,0.855,77,0.855,78,0.942,79,0.694,80,0.921,81,0.631,82,0.921,83,0.631,84,0.762,133,1.69,435,1.586,438,2.222,439,2.222,440,2.222,441,2.222]],["title/classes/GetCustomerByUsernameInput.html",[57,0.173,345,1.39]],["body/classes/GetCustomerByUsernameInput.html",[3,0.399,4,0.338,5,0.338,7,0.462,8,0.462,9,0.746,11,0.609,13,0.936,16,0.462,17,0.038,18,0.834,19,0.923,21,0.599,25,1.121,26,0.751,32,1.521,43,0.399,48,1.638,50,1.396,51,0.751,56,0.541,57,0.304,60,0.029,61,0.029,63,1.018,65,1.067,72,1.922,73,1.121,75,1.521,324,3.068,341,1.635,342,2.482,344,1.635,345,2.244,442,3.945]],["title/classes/GetCustomerInput.html",[57,0.173,344,1.262]],["body/classes/GetCustomerInput.html",[3,0.398,4,0.337,5,0.337,7,0.461,8,0.461,9,0.745,11,0.609,13,1.097,16,0.461,17,0.038,18,1.038,19,0.921,21,0.598,25,1.395,26,0.935,32,1.395,43,0.398,48,1.591,50,1.395,51,0.75,56,0.54,57,0.304,60,0.029,61,0.029,63,1.016,65,1.066,69,1.631,72,1.92,73,1.119,75,1.52,324,2.909,341,1.631,342,2.477,344,2.034,345,1.798,443,3.937]],["title/classes/UpdateAllocationInput.html",[57,0.173,81,0.865]],["body/classes/UpdateAllocationInput.html",[1,0.938,3,0.221,4,0.188,5,0.188,7,0.257,8,0.257,9,0.498,10,2.289,11,0.528,12,1.669,13,1.124,14,1.337,15,2.289,16,0.626,17,0.038,18,1.269,19,1.093,21,0.709,25,1.546,26,1.065,28,1.97,32,1.393,35,1.23,36,1.936,37,1.936,38,1.761,39,1.936,40,1.379,42,1.936,43,0.331,44,1.761,47,0.623,48,1.716,50,1.648,51,0.417,56,0.514,57,0.289,58,1.644,60,0.019,61,0.019,62,0.752,63,0.566,64,0.908,65,0.995,66,1.498,67,1.936,68,1.236,69,1.629,72,1.793,73,0.623,74,0.566,75,0.932,76,0.566,77,0.566,78,0.623,79,0.685,80,1.359,81,0.932,82,0.908,83,0.623,84,0.752,133,1.682,435,1.565,444,2.192,445,2.192,446,2.192,447,2.192,448,2.192]],["title/coverage.html",[449,2.963]],["body/coverage.html",[0,2.643,1,0.715,5,0.316,6,3.896,11,0.476,16,0.432,17,0.037,57,0.351,60,0.028,61,0.028,62,1.264,64,2.433,74,0.951,78,1.047,79,1.151,81,1.047,83,1.047,84,1.264,92,1.527,93,1.861,109,2.319,115,2.06,117,3.05,177,3.05,227,3.05,236,1.683,266,2.069,283,2.631,341,1.527,342,3.264,344,1.527,345,1.683,346,3.896,358,1.861,362,2.319,365,3.05,382,3.05,404,3.05,449,2.631,450,3.686,451,3.686,452,3.686,453,6.234,454,5.188,455,3.686,456,4.708,457,4.708,458,3.686,459,3.686,460,3.686,461,5.188,462,4.708,463,5.188,464,3.686,465,3.686,466,3.686,467,5.188,468,3.05,469,3.686,470,3.05,471,3.686]],["title/dependencies.html",[88,1.848,472,2.106]],["body/dependencies.html",[17,0.037,47,1.252,51,0.839,57,0.25,60,0.031,61,0.031,88,2.224,101,1.825,103,2.771,259,2.771,260,2.473,261,3.307,315,3.645,473,4.405,474,4.405,475,4.405,476,5.257,477,5.619,478,4.405,479,4.405,480,4.405,481,4.405,482,4.405,483,4.405,484,4.405,485,4.405,486,4.405,487,4.405,488,4.405,489,4.405,490,4.405,491,4.405,492,4.405]],["title/miscellaneous/functions.html",[493,2.106,494,3.029]],["body/miscellaneous/functions.html",[8,0.561,17,0.032,60,0.032,61,0.032,468,3.966,470,4.815,493,3.966,494,3.966,495,4.792,496,4.792,497,4.792,498,4.792,499,4.792]],["title/index.html",[8,0.298,75,0.723,500,2.545]],["body/index.html",[4,0.344,7,0.47,17,0.037,60,0.029,61,0.029,118,2.25,260,2.25,316,3.318,449,2.862,501,4.009,502,4.009,503,4.964,504,4.009,505,4.009,506,4.009,507,4.009,508,4.009,509,5.392,510,4.009,511,4.009,512,4.009,513,5.982,514,4.009,515,4.009,516,4.009,517,5.901,518,4.009,519,4.009,520,4.964,521,4.009,522,4.009,523,4.009,524,4.009,525,4.964,526,4.964,527,4.009,528,4.009,529,4.009,530,4.964,531,4.964,532,4.009,533,4.009,534,4.009,535,4.009,536,4.009,537,3.318,538,4.009,539,4.009,540,4.009,541,4.009,542,4.009,543,4.009,544,4.009,545,4.009,546,4.009,547,3.318,548,4.009,549,4.009,550,4.009,551,4.009,552,4.009,553,4.009,554,3.318]],["title/modules.html",[87,2.096]],["body/modules.html",[17,0.032,60,0.032,61,0.032,86,2.396,87,2.396,105,2.396,307,2.985,537,4.796,555,5.795,556,5.795,557,5.795]],["title/overview.html",[558,3.435]],["body/overview.html",[2,2.624,17,0.036,38,1.572,58,1.572,60,0.03,61,0.03,63,1.077,86,3.074,87,2.106,88,2.568,89,3.452,90,3.452,91,3.452,92,2.499,93,2.771,94,3.2,95,2.624,96,2.624,105,3.074,116,2.341,236,2.754,307,3.748,308,3.452,309,3.452,355,3.452,356,3.452,357,3.452,358,2.771,558,3.452,559,4.171,560,4.171]],["title/properties.html",[9,0.556,472,2.106]],["body/properties.html",[7,0.563,9,0.729,17,0.036,60,0.032,61,0.032,547,3.975,554,3.975,561,4.804,562,4.804,563,4.804]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":301,"title":{},"body":{"injectables/AllocationService.html":{}}}],["0.0.1",{"_index":562,"title":{},"body":{"properties.html":{}}}],["0.13.2",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["0.3.4",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["10.1.7",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["11/12",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":560,"title":{},"body":{"overview.html":{}}}],["16.6.0",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":58,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"overview.html":{}}}],["2/2",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["2})@field",{"_index":339,"title":{},"body":{"classes/CreateAllocationInput.html":{}}}],["2})@field({nullable",{"_index":40,"title":{},"body":{"entities/Allocation.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["3",{"_index":38,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"overview.html":{}}}],["3.0.2",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["3.11.1",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":559,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["6/6",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["8.8.0",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["91",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["a.amount",{"_index":303,"title":{},"body":{"injectables/AllocationService.html":{}}}],["allcations",{"_index":388,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["allocation",{"_index":1,"title":{"entities/Allocation.html":{}},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"entities/Customer.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["allocation.customer",{"_index":354,"title":{},"body":{"entities/Customer.html":{}}}],["allocation.customer)@field(undefined",{"_index":348,"title":{},"body":{"entities/Customer.html":{}}}],["allocation.entity",{"_index":107,"title":{},"body":{"modules/AllocationModule.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{}}}],["allocation.name",{"_index":286,"title":{},"body":{"injectables/AllocationService.html":{}}}],["allocation.repository",{"_index":108,"title":{},"body":{"modules/AllocationModule.html":{},"injectables/AllocationService.html":{}}}],["allocation.resolver",{"_index":110,"title":{},"body":{"modules/AllocationModule.html":{}}}],["allocation.service",{"_index":213,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["allocation/allocation.entity",{"_index":257,"title":{},"body":{"injectables/AllocationService.html":{},"modules/AppModule.html":{},"entities/Customer.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["allocation/allocation.module",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{}}}],["allocation/allocation.service",{"_index":104,"title":{},"body":{"modules/AllocationModule.html":{},"injectables/CustomerService.html":{}}}],["allocationexists",{"_index":229,"title":{},"body":{"injectables/AllocationService.html":{}}}],["allocationexists(allocationexistsinput",{"_index":238,"title":{},"body":{"injectables/AllocationService.html":{}}}],["allocationexistsinput",{"_index":62,"title":{"classes/AllocationExistsInput.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["allocationmodule",{"_index":86,"title":{"modules/AllocationModule.html":{}},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"modules.html":{},"overview.html":{}}}],["allocationnameexists",{"_index":273,"title":{},"body":{"injectables/AllocationService.html":{}}}],["allocationnameexistsinput",{"_index":84,"title":{"classes/AllocationNameExistsInput.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["allocationrepository",{"_index":93,"title":{"injectables/AllocationRepository.html":{}},"body":{"modules/AllocationModule.html":{},"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"coverage.html":{},"overview.html":{}}}],["allocationresolver",{"_index":109,"title":{"classes/AllocationResolver.html":{}},"body":{"modules/AllocationModule.html":{},"classes/AllocationResolver.html":{},"coverage.html":{}}}],["allocations",{"_index":77,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"entities/Customer.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["allocations(@parent",{"_index":402,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["allocations(customer",{"_index":386,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["allocations(getallocationsinput",{"_index":186,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["allocations.foreach((a",{"_index":302,"title":{},"body":{"injectables/AllocationService.html":{}}}],["allocations.length",{"_index":305,"title":{},"body":{"injectables/AllocationService.html":{}}}],["allocationservice",{"_index":92,"title":{"injectables/AllocationService.html":{}},"body":{"modules/AllocationModule.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"coverage.html":{},"overview.html":{}}}],["allocationstotalamount",{"_index":179,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["allocationstotalamount(getallocationsinput",{"_index":191,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["already",{"_index":276,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["amazing",{"_index":538,"title":{},"body":{"index.html":{}}}],["amount",{"_index":10,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["amounts",{"_index":194,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["apollo",{"_index":259,"title":{},"body":{"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"dependencies.html":{}}}],["apollodriver",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":515,"title":{},"body":{"index.html":{}}}],["application",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applications",{"_index":508,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":307,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":210,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["args('createallocationinput",{"_index":214,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["args('createcustomerinput",{"_index":395,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["args('deleteallocationinput",{"_index":221,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["args('getallocationsinput",{"_index":216,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["args('getcustomerinput",{"_index":398,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["args('sumallocationsinput",{"_index":223,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["args('updateallocationinput",{"_index":218,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["assetallocator",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["associated",{"_index":28,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"entities/Customer.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["async",{"_index":122,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["author",{"_index":547,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autoschemafile",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":169,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["backers",{"_index":539,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":220,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["bootstrap",{"_index":470,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":557,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":555,"title":{},"body":{"modules.html":{}}}],["building",{"_index":504,"title":{},"body":{"index.html":{}}}],["catch",{"_index":279,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["checking",{"_index":66,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["checks",{"_index":240,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["class",{"_index":57,"title":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/AllocationResolver.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"classes/CustomerResolver.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":63,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/AllocationResolver.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"classes/CustomerResolver.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"overview.html":{}}}],["cluster_allocationmodule",{"_index":89,"title":{},"body":{"modules/AllocationModule.html":{},"overview.html":{}}}],["cluster_allocationmodule_exports",{"_index":91,"title":{},"body":{"modules/AllocationModule.html":{},"overview.html":{}}}],["cluster_allocationmodule_providers",{"_index":90,"title":{},"body":{"modules/AllocationModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":355,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":356,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":357,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["collection",{"_index":76,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["column",{"_index":44,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"entities/Customer.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["column()@field",{"_index":33,"title":{},"body":{"entities/Allocation.html":{},"entities/Customer.html":{}}}],["column()@field(undefined",{"_index":20,"title":{},"body":{"entities/Allocation.html":{}}}],["column({type",{"_index":35,"title":{},"body":{"entities/Allocation.html":{},"classes/CreateAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["const",{"_index":267,"title":{},"body":{"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["constructor",{"_index":128,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["constructor(allocationrepository",{"_index":235,"title":{},"body":{"injectables/AllocationService.html":{}}}],["constructor(allocationservice",{"_index":183,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["constructor(customerrepository",{"_index":407,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(customerservice",{"_index":384,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["constructor(datasource",{"_index":129,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["constructor(private",{"_index":164,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{}}}],["coverage",{"_index":449,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":121,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["create(createallocationinput",{"_index":136,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["create(createcustomerinput",{"_index":368,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["createallocation",{"_index":180,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["createallocation(createallocationinput",{"_index":195,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["createallocationinput",{"_index":74,"title":{"classes/CreateAllocationInput.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CustomerResolver.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["createallocationinput.customerid",{"_index":270,"title":{},"body":{"injectables/AllocationService.html":{}}}],["createallocationinput.name",{"_index":275,"title":{},"body":{"injectables/AllocationService.html":{}}}],["createcustomer",{"_index":383,"title":{},"body":{"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["createcustomer(createcustomerinput",{"_index":389,"title":{},"body":{"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["createcustomerinput",{"_index":341,"title":{"classes/CreateCustomerInput.html":{}},"body":{"classes/CreateCustomerInput.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"coverage.html":{}}}],["createcustomerinput.username",{"_index":421,"title":{},"body":{"injectables/CustomerService.html":{}}}],["created",{"_index":141,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["creates",{"_index":138,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["creating",{"_index":73,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["customer",{"_index":11,"title":{"entities/Customer.html":{}},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["customer(@parent",{"_index":225,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["customer(allocation",{"_index":198,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["customer(getcustomerinput",{"_index":391,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["customer.allocations",{"_index":59,"title":{},"body":{"entities/Allocation.html":{}}}],["customer.allocations)@field(undefined",{"_index":24,"title":{},"body":{"entities/Allocation.html":{}}}],["customer.entity",{"_index":360,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{}}}],["customer.repository",{"_index":361,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.resolver",{"_index":363,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.service",{"_index":394,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["customer.username",{"_index":424,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer/customer.entity",{"_index":52,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{}}}],["customer/customer.module",{"_index":106,"title":{},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{}}}],["customer/customer.service",{"_index":262,"title":{},"body":{"injectables/AllocationService.html":{},"modules/CustomerModule.html":{}}}],["customerexists",{"_index":268,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["customerexists(getcustomerinput",{"_index":410,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customerid",{"_index":12,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["customermodule",{"_index":105,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":358,"title":{"injectables/CustomerRepository.html":{}},"body":{"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"coverage.html":{},"overview.html":{}}}],["customerresolver",{"_index":362,"title":{"classes/CustomerResolver.html":{}},"body":{"modules/CustomerModule.html":{},"classes/CustomerResolver.html":{},"coverage.html":{}}}],["customers",{"_index":373,"title":{},"body":{"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["customerservice",{"_index":236,"title":{"injectables/CustomerService.html":{}},"body":{"injectables/AllocationService.html":{},"modules/CustomerModule.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":134,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["database",{"_index":139,"title":{},"body":{"injectables/AllocationRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{}}}],["datasource",{"_index":130,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["decimal",{"_index":36,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/AllocationResolver.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"classes/CustomerResolver.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["defined",{"_index":21,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["delete",{"_index":123,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["delete(deleteallocationinput",{"_index":142,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["deleteallocation",{"_index":181,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["deleteallocation(deleteallocationinput",{"_index":201,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["deleteallocationinput",{"_index":83,"title":{"classes/DeleteAllocationInput.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["deleteallocationinput.customerid",{"_index":296,"title":{},"body":{"injectables/AllocationService.html":{}}}],["deleteallocationinput.id",{"_index":298,"title":{},"body":{"injectables/AllocationService.html":{}}}],["deletes",{"_index":144,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["deleting",{"_index":82,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["deletion",{"_index":203,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["dependencies",{"_index":88,"title":{"dependencies.html":{}},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":516,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":272,"title":{},"body":{"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{}}}],["driver",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/allocation.dto",{"_index":162,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["dto/customer.dto",{"_index":376,"title":{},"body":{"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["e",{"_index":280,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["e2e",{"_index":527,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":505,"title":{},"body":{"index.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Allocation.html":{},"modules/AppModule.html":{},"entities/Customer.html":{},"overview.html":{}}}],["entity",{"_index":0,"title":{"entities/Allocation.html":{},"entities/Customer.html":{}},"body":{"entities/Allocation.html":{},"entities/Customer.html":{},"coverage.html":{}}}],["entity('allocation",{"_index":53,"title":{},"body":{"entities/Allocation.html":{}}}],["entry",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":282,"title":{},"body":{"injectables/AllocationService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{}}}],["error(`error",{"_index":426,"title":{},"body":{"injectables/CustomerService.html":{}}}],["error(error.message",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["exist",{"_index":401,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["exists",{"_index":68,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["export",{"_index":56,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["exports",{"_index":99,"title":{},"body":{"modules/AllocationModule.html":{},"modules/CustomerModule.html":{}}}],["express",{"_index":261,"title":{},"body":{"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"dependencies.html":{}}}],["false",{"_index":241,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["field",{"_index":48,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["field(undefined",{"_index":69,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["field({nullable",{"_index":435,"title":{},"body":{"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["find",{"_index":124,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["find(getallocationsinput",{"_index":146,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["find(getcustomerinput",{"_index":370,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["findall",{"_index":366,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["findone",{"_index":125,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["findone(getallocationinput",{"_index":151,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["finds",{"_index":148,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["formaterror",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["forwardref",{"_index":100,"title":{},"body":{"modules/AllocationModule.html":{},"injectables/AllocationService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["found",{"_index":150,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["framework",{"_index":503,"title":{},"body":{"index.html":{}}}],["function",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":494,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getallcustomers",{"_index":405,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getallocation",{"_index":230,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getallocation(getallocationinput",{"_index":245,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getallocationinput",{"_index":79,"title":{"classes/GetAllocationInput.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["getallocationinput.name",{"_index":291,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getallocations",{"_index":231,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["getallocations(customerid",{"_index":413,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getallocations(getallocationsinput",{"_index":247,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getallocationsinput",{"_index":78,"title":{"classes/GetAllocationsInput.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["getallocationsinput.customerid",{"_index":289,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getallocationstotalamount",{"_index":232,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getallocationstotalamount(getallocationsinput",{"_index":249,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getcustomer",{"_index":233,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["getcustomer(customerid",{"_index":251,"title":{},"body":{"injectables/AllocationService.html":{}}}],["getcustomer(getcustomerinput",{"_index":415,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerbyusernameinput",{"_index":345,"title":{"classes/GetCustomerByUsernameInput.html":{}},"body":{"classes/CreateCustomerInput.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"coverage.html":{}}}],["getcustomerinput",{"_index":344,"title":{"classes/GetCustomerInput.html":{}},"body":{"classes/CreateCustomerInput.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"coverage.html":{}}}],["getcustomerinput.id",{"_index":400,"title":{},"body":{"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["gets",{"_index":189,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["getting",{"_index":75,"title":{"index.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["golevelup/ts",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["graphql",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["graphqlmodule",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":534,"title":{},"body":{"index.html":{}}}],["here",{"_index":544,"title":{},"body":{"index.html":{}}}],["host",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":551,"title":{},"body":{"index.html":{}}}],["id",{"_index":13,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["identifier",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":43,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["imports",{"_index":111,"title":{},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"miscellaneous/functions.html":{}}}],["index(['name",{"_index":54,"title":{},"body":{"entities/Allocation.html":{}}}],["index(['username",{"_index":353,"title":{},"body":{"entities/Customer.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["inject",{"_index":256,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["inject(allocationrepository",{"_index":263,"title":{},"body":{"injectables/AllocationService.html":{}}}],["inject(customerrepository",{"_index":419,"title":{},"body":{"injectables/CustomerService.html":{}}}],["inject(forwardref",{"_index":264,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["injectable",{"_index":115,"title":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"coverage.html":{}}}],["injectables",{"_index":116,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"overview.html":{}}}],["injected",{"_index":135,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["input",{"_index":65,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["inputtype",{"_index":72,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["installation",{"_index":512,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":514,"title":{},"body":{"index.html":{}}}],["int",{"_index":50,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["jest",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(process.cwd",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["kamil",{"_index":548,"title":{},"body":{"index.html":{}}}],["license",{"_index":554,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":531,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":228,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["luisribeiro",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["manytoone",{"_index":46,"title":{},"body":{"entities/Allocation.html":{}}}],["manytoone(undefined",{"_index":23,"title":{},"body":{"entities/Allocation.html":{}}}],["matching",{"_index":61,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["methods",{"_index":120,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["miscellaneous",{"_index":493,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":530,"title":{},"body":{"index.html":{}}}],["mode",{"_index":520,"title":{},"body":{"index.html":{}}}],["module",{"_index":85,"title":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{}},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{}}}],["modules",{"_index":87,"title":{"modules.html":{}},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":543,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":209,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["mutation(undefined",{"_index":196,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["myśliwiec",{"_index":549,"title":{},"body":{"index.html":{}}}],["name",{"_index":14,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["nameexists",{"_index":234,"title":{},"body":{"injectables/AllocationService.html":{}}}],["nameexists(allocationnameexistsinput",{"_index":253,"title":{},"body":{"injectables/AllocationService.html":{}}}],["nest",{"_index":509,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":553,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs/apollo",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":101,"title":{},"body":{"modules/AllocationModule.html":{},"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":51,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/AllocationResolver.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"classes/CustomerResolver.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":103,"title":{},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"dependencies.html":{}}}],["new",{"_index":266,"title":{},"body":{"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"coverage.html":{}}}],["node.js",{"_index":502,"title":{},"body":{"index.html":{}}}],["npm",{"_index":513,"title":{},"body":{"index.html":{}}}],["null",{"_index":154,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["nullable",{"_index":25,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["number",{"_index":18,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["objecttype",{"_index":49,"title":{},"body":{"entities/Allocation.html":{},"entities/Customer.html":{}}}],["onetomany",{"_index":352,"title":{},"body":{"entities/Customer.html":{}}}],["onetomany(undefined",{"_index":347,"title":{},"body":{"entities/Customer.html":{}}}],["open",{"_index":532,"title":{},"body":{"index.html":{}}}],["optional",{"_index":133,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"entities/Customer.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["otherwise",{"_index":242,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["out",{"_index":96,"title":{},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"overview.html":{}}}],["overview",{"_index":558,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":472,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":163,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["parameters",{"_index":132,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["parent",{"_index":211,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["password",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["path",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["percentage",{"_index":42,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["pg",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":541,"title":{},"body":{"index.html":{}}}],["point",{"_index":497,"title":{},"body":{"miscellaneous/functions.html":{}}}],["port",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["precision",{"_index":37,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["primarygeneratedcolumn",{"_index":45,"title":{},"body":{"entities/Allocation.html":{},"entities/Customer.html":{}}}],["primarygeneratedcolumn()@field(undefined",{"_index":30,"title":{},"body":{"entities/Allocation.html":{},"entities/Customer.html":{}}}],["private",{"_index":119,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["production",{"_index":522,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":501,"title":{},"body":{"index.html":{}}}],["project",{"_index":533,"title":{},"body":{"index.html":{}}}],["promise",{"_index":149,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"properties.html":{}}}],["providers",{"_index":98,"title":{},"body":{"modules/AllocationModule.html":{},"modules/CustomerModule.html":{}}}],["query",{"_index":208,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["query(undefined",{"_index":187,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["read",{"_index":542,"title":{},"body":{"index.html":{}}}],["related",{"_index":190,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["repository",{"_index":118,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"index.html":{}}}],["reset",{"_index":95,"title":{},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"overview.html":{}}}],["resolvefield",{"_index":212,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["resolvefield(undefined",{"_index":199,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["resolver",{"_index":178,"title":{},"body":{"classes/AllocationResolver.html":{},"classes/CustomerResolver.html":{}}}],["results",{"_index":60,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieving",{"_index":288,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["return",{"_index":167,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["returns",{"_index":140,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["rimraf",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":517,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":126,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["save(allocation",{"_index":155,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["save(customer",{"_index":374,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["saved",{"_index":158,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["saves",{"_index":157,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["saving",{"_index":285,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["scalable",{"_index":506,"title":{},"body":{"index.html":{}}}],["scale",{"_index":39,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["server",{"_index":260,"title":{},"body":{"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"dependencies.html":{},"index.html":{}}}],["service",{"_index":185,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["side",{"_index":507,"title":{},"body":{"index.html":{}}}],["single",{"_index":153,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"modules/AllocationModule.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"modules/CustomerModule.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"index.html":{}}}],["specific",{"_index":67,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/CustomerResolver.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["sponsors",{"_index":536,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/allocation/allocation.entity.ts",{"_index":6,"title":{},"body":{"entities/Allocation.html":{},"coverage.html":{}}}],["src/allocation/allocation.entity.ts:23",{"_index":31,"title":{},"body":{"entities/Allocation.html":{}}}],["src/allocation/allocation.entity.ts:30",{"_index":34,"title":{},"body":{"entities/Allocation.html":{}}}],["src/allocation/allocation.entity.ts:37",{"_index":22,"title":{},"body":{"entities/Allocation.html":{}}}],["src/allocation/allocation.entity.ts:44",{"_index":41,"title":{},"body":{"entities/Allocation.html":{}}}],["src/allocation/allocation.entity.ts:51",{"_index":29,"title":{},"body":{"entities/Allocation.html":{}}}],["src/allocation/allocation.entity.ts:58",{"_index":27,"title":{},"body":{"entities/Allocation.html":{}}}],["src/allocation/allocation.module.ts",{"_index":97,"title":{},"body":{"modules/AllocationModule.html":{}}}],["src/allocation/allocation.repository.ts",{"_index":117,"title":{},"body":{"injectables/AllocationRepository.html":{},"coverage.html":{}}}],["src/allocation/allocation.repository.ts:17",{"_index":131,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["src/allocation/allocation.repository.ts:32",{"_index":137,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["src/allocation/allocation.repository.ts:41",{"_index":156,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["src/allocation/allocation.repository.ts:50",{"_index":147,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["src/allocation/allocation.repository.ts:59",{"_index":152,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["src/allocation/allocation.repository.ts:68",{"_index":160,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["src/allocation/allocation.repository.ts:83",{"_index":143,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["src/allocation/allocation.resolver.ts",{"_index":177,"title":{},"body":{"classes/AllocationResolver.html":{},"coverage.html":{}}}],["src/allocation/allocation.resolver.ts:23",{"_index":184,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["src/allocation/allocation.resolver.ts:36",{"_index":197,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["src/allocation/allocation.resolver.ts:48",{"_index":188,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["src/allocation/allocation.resolver.ts:60",{"_index":206,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["src/allocation/allocation.resolver.ts:72",{"_index":202,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["src/allocation/allocation.resolver.ts:84",{"_index":192,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["src/allocation/allocation.resolver.ts:98",{"_index":200,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["src/allocation/allocation.service.ts",{"_index":227,"title":{},"body":{"injectables/AllocationService.html":{},"coverage.html":{}}}],["src/allocation/allocation.service.ts:105",{"_index":246,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:123",{"_index":255,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:162",{"_index":244,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:197",{"_index":250,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:215",{"_index":239,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:22",{"_index":237,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:230",{"_index":254,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:245",{"_index":252,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:42",{"_index":243,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/allocation.service.ts:87",{"_index":248,"title":{},"body":{"injectables/AllocationService.html":{}}}],["src/allocation/dto/allocation.dto.ts",{"_index":64,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["src/allocation/dto/allocation.dto.ts:100",{"_index":437,"title":{},"body":{"classes/GetAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:112",{"_index":446,"title":{},"body":{"classes/UpdateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:118",{"_index":445,"title":{},"body":{"classes/UpdateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:124",{"_index":447,"title":{},"body":{"classes/UpdateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:13",{"_index":338,"title":{},"body":{"classes/CreateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:130",{"_index":444,"title":{},"body":{"classes/UpdateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:137",{"_index":448,"title":{},"body":{"classes/UpdateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:149",{"_index":431,"title":{},"body":{"classes/DeleteAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:155",{"_index":430,"title":{},"body":{"classes/DeleteAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:167",{"_index":71,"title":{},"body":{"classes/AllocationExistsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:173",{"_index":70,"title":{},"body":{"classes/AllocationExistsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:185",{"_index":114,"title":{},"body":{"classes/AllocationNameExistsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:19",{"_index":336,"title":{},"body":{"classes/CreateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:191",{"_index":113,"title":{},"body":{"classes/AllocationNameExistsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:26",{"_index":340,"title":{},"body":{"classes/CreateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:32",{"_index":337,"title":{},"body":{"classes/CreateAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:44",{"_index":440,"title":{},"body":{"classes/GetAllocationsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:50",{"_index":438,"title":{},"body":{"classes/GetAllocationsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:57",{"_index":441,"title":{},"body":{"classes/GetAllocationsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:63",{"_index":439,"title":{},"body":{"classes/GetAllocationsInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:75",{"_index":434,"title":{},"body":{"classes/GetAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:81",{"_index":433,"title":{},"body":{"classes/GetAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:87",{"_index":436,"title":{},"body":{"classes/GetAllocationInput.html":{}}}],["src/allocation/dto/allocation.dto.ts:93",{"_index":432,"title":{},"body":{"classes/GetAllocationInput.html":{}}}],["src/app.module.ts",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["src/customer/customer.entity.ts",{"_index":346,"title":{},"body":{"entities/Customer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:23",{"_index":350,"title":{},"body":{"entities/Customer.html":{}}}],["src/customer/customer.entity.ts:30",{"_index":351,"title":{},"body":{"entities/Customer.html":{}}}],["src/customer/customer.entity.ts:37",{"_index":349,"title":{},"body":{"entities/Customer.html":{}}}],["src/customer/customer.module.ts",{"_index":359,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.repository.ts",{"_index":365,"title":{},"body":{"injectables/CustomerRepository.html":{},"coverage.html":{}}}],["src/customer/customer.repository.ts:15",{"_index":367,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/customer/customer.repository.ts:30",{"_index":369,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/customer/customer.repository.ts:39",{"_index":375,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/customer/customer.repository.ts:47",{"_index":372,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/customer/customer.repository.ts:56",{"_index":371,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/customer/customer.resolver.ts",{"_index":382,"title":{},"body":{"classes/CustomerResolver.html":{},"coverage.html":{}}}],["src/customer/customer.resolver.ts:19",{"_index":385,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["src/customer/customer.resolver.ts:32",{"_index":390,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["src/customer/customer.resolver.ts:43",{"_index":393,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["src/customer/customer.resolver.ts:53",{"_index":392,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["src/customer/customer.resolver.ts:70",{"_index":387,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["src/customer/customer.service.ts",{"_index":404,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:106",{"_index":411,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:117",{"_index":418,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:132",{"_index":414,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":408,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:38",{"_index":409,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:72",{"_index":412,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:86",{"_index":416,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/dto/customer.dto.ts",{"_index":342,"title":{},"body":{"classes/CreateCustomerInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"coverage.html":{}}}],["src/customer/dto/customer.dto.ts:12",{"_index":343,"title":{},"body":{"classes/CreateCustomerInput.html":{}}}],["src/customer/dto/customer.dto.ts:24",{"_index":443,"title":{},"body":{"classes/GetCustomerInput.html":{}}}],["src/customer/dto/customer.dto.ts:36",{"_index":442,"title":{},"body":{"classes/GetCustomerByUsernameInput.html":{}}}],["src/main.ts",{"_index":468,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/schema.gql",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":518,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":521,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":523,"title":{},"body":{"index.html":{}}}],["started",{"_index":500,"title":{"index.html":{}},"body":{}}],["starter",{"_index":511,"title":{},"body":{"index.html":{}}}],["statements",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":545,"title":{},"body":{"index.html":{}}}],["string",{"_index":32,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["sucessfull",{"_index":204,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["sum",{"_index":193,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["support",{"_index":537,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":556,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":283,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":15,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["test",{"_index":526,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":529,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":528,"title":{},"body":{"index.html":{}}}],["tests",{"_index":525,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":535,"title":{},"body":{"index.html":{}}}],["this.allocationexists",{"_index":292,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationexists(deleteallocationinput",{"_index":297,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationrepository.create(createallocationinput",{"_index":278,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationrepository.delete(deleteallocationinput",{"_index":299,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationrepository.find",{"_index":304,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationrepository.find(getallocationsinput",{"_index":287,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationrepository.findone(getallocationinput",{"_index":290,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationrepository.save(allocation",{"_index":284,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationrepository.update(updateallocationinput",{"_index":293,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.allocationservice.createallocation(createallocationinput",{"_index":215,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["this.allocationservice.deleteallocation(deleteallocationinput",{"_index":222,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["this.allocationservice.getallocations",{"_index":429,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.allocationservice.getallocations(getallocationsinput",{"_index":217,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["this.allocationservice.getallocationstotalamount",{"_index":224,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["this.allocationservice.getcustomer(allocation.customerid",{"_index":226,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["this.allocationservice.updateallocation(updateallocationinput",{"_index":219,"title":{},"body":{"classes/AllocationResolver.html":{}}}],["this.customerrepository.create(createcustomerinput",{"_index":422,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.find",{"_index":428,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.find(getcustomerinput",{"_index":427,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findall",{"_index":425,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save(customer",{"_index":423,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.createcustomer(createcustomerinput",{"_index":396,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["this.customerservice.customerexists",{"_index":269,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.customerservice.getallcustomers",{"_index":397,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["this.customerservice.getallocations(customer.id",{"_index":403,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["this.customerservice.getcustomer",{"_index":306,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.customerservice.getcustomer(getcustomerinput",{"_index":399,"title":{},"body":{"classes/CustomerResolver.html":{}}}],["this.datasource.getrepository(allocation",{"_index":166,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["this.datasource.getrepository(customer",{"_index":377,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.getallocation(updateallocationinput",{"_index":295,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.getallocations(getallocationsinput",{"_index":300,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.logger",{"_index":265,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["this.logger.error(e",{"_index":281,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["this.nameexists(createallocationinput",{"_index":274,"title":{},"body":{"injectables/AllocationService.html":{}}}],["this.repository",{"_index":165,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/CustomerRepository.html":{}}}],["this.repository.create(createallocationinput",{"_index":168,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["this.repository.create(createcustomerinput",{"_index":378,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.repository.delete(deleteallocationinput",{"_index":176,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["this.repository.find",{"_index":380,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.repository.findby(getallocationsinput",{"_index":171,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["this.repository.findoneby(getallocationinput",{"_index":172,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["this.repository.findoneby(getcustomerinput",{"_index":381,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.repository.save(allocation",{"_index":170,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["this.repository.save(customer",{"_index":379,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.repository.update",{"_index":173,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["this.usernameexists(createcustomerinput",{"_index":420,"title":{},"body":{"injectables/CustomerService.html":{}}}],["throw",{"_index":271,"title":{},"body":{"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["touch",{"_index":546,"title":{},"body":{"index.html":{}}}],["true",{"_index":26,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["try",{"_index":277,"title":{},"body":{"injectables/AllocationService.html":{},"injectables/CustomerService.html":{}}}],["twitter",{"_index":552,"title":{},"body":{"index.html":{}}}],["type",{"_index":16,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"modules/AppModule.html":{},"classes/CreateAllocationInput.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["typeorm",{"_index":47,"title":{},"body":{"entities/Allocation.html":{},"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/CreateAllocationInput.html":{},"entities/Customer.html":{},"injectables/CustomerRepository.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":102,"title":{},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{}}}],["typeormmodule.forfeature([allocation",{"_index":112,"title":{},"body":{"modules/AllocationModule.html":{}}}],["typeormmodule.forfeature([customer",{"_index":364,"title":{},"body":{"modules/CustomerModule.html":{}}}],["typeormmodule.forroot",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":510,"title":{},"body":{"index.html":{}}}],["unique",{"_index":55,"title":{},"body":{"entities/Allocation.html":{},"entities/Customer.html":{}}}],["unit",{"_index":524,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":563,"title":{},"body":{"properties.html":{}}}],["update",{"_index":127,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["update(updateallocationinput",{"_index":159,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["updateallocation",{"_index":182,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["updateallocation(updateallocationinput",{"_index":205,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["updateallocationinput",{"_index":81,"title":{"classes/UpdateAllocationInput.html":{}},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{},"coverage.html":{}}}],["updateallocationinput.customerid",{"_index":175,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{}}}],["updateallocationinput.id",{"_index":174,"title":{},"body":{"injectables/AllocationRepository.html":{},"injectables/AllocationService.html":{}}}],["updateallocationinput.name",{"_index":294,"title":{},"body":{"injectables/AllocationService.html":{}}}],["updated",{"_index":207,"title":{},"body":{"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["updates",{"_index":161,"title":{},"body":{"injectables/AllocationRepository.html":{},"classes/AllocationResolver.html":{},"injectables/AllocationService.html":{}}}],["updating",{"_index":80,"title":{},"body":{"classes/AllocationExistsInput.html":{},"classes/AllocationNameExistsInput.html":{},"injectables/AllocationService.html":{},"classes/CreateAllocationInput.html":{},"classes/DeleteAllocationInput.html":{},"classes/GetAllocationInput.html":{},"classes/GetAllocationsInput.html":{},"classes/UpdateAllocationInput.html":{}}}],["username",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateCustomerInput.html":{},"entities/Customer.html":{},"injectables/CustomerService.html":{},"classes/GetCustomerByUsernameInput.html":{},"classes/GetCustomerInput.html":{}}}],["usernameexists",{"_index":406,"title":{},"body":{"injectables/CustomerService.html":{}}}],["usernameexists(getcustomerbyusernameinput",{"_index":417,"title":{},"body":{"injectables/CustomerService.html":{}}}],["validationerror",{"_index":258,"title":{},"body":{"injectables/AllocationService.html":{},"classes/CustomerResolver.html":{},"injectables/CustomerService.html":{}}}],["validator",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["version",{"_index":561,"title":{},"body":{"properties.html":{}}}],["void",{"_index":145,"title":{},"body":{"injectables/AllocationRepository.html":{}}}],["watch",{"_index":519,"title":{},"body":{"index.html":{}}}],["website",{"_index":550,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":540,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":94,"title":{},"body":{"modules/AllocationModule.html":{},"modules/AppModule.html":{},"modules/CustomerModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Allocation.html":{"url":"entities/Allocation.html","title":"entity - Allocation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Allocation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/allocation.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Allocation Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                customer\n                            \n                            \n                                customerId\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.entity.ts:37\n                        \n                    \n\n            \n                \n                    Allocation Amount\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Customer\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, customer => customer.allocations)@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.entity.ts:58\n                        \n                    \n\n            \n                \n                    Customer associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.entity.ts:51\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.entity.ts:23\n                        \n                    \n\n            \n                \n                    Allocation ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.entity.ts:30\n                        \n                    \n\n            \n                \n                    Allocation Name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 3, scale: 2})@Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.entity.ts:44\n                        \n                    \n\n            \n                \n                    Allocation Target Percentage\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  Index,\n} from 'typeorm';\nimport { Field, ObjectType, Int } from '@nestjs/graphql';\nimport { Customer } from '../customer/customer.entity';\n\n/**\n * Allocation Entity\n */\n@ObjectType()\n@Entity('allocation')\n@Index(['name', 'customerId'], { unique: true })\nexport class Allocation {\n  /**\n   * Allocation ID\n   */\n  @PrimaryGeneratedColumn()\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Allocation Name\n   */\n  @Column()\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Column()\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Column()\n  @Field(() => Int, { nullable: true })\n  customerId: number;\n\n  /**\n   * Customer associated with Allocation\n   */\n  @ManyToOne(() => Customer, (customer) => customer.allocations)\n  @Field(() => Customer, { nullable: true })\n  customer: Customer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllocationExistsInput.html":{"url":"classes/AllocationExistsInput.html","title":"class - AllocationExistsInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllocationExistsInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/dto/allocation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for checking if specific allocation exists\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                customerId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:173\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:167\n                        \n                    \n\n            \n                \n                    Allocation ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Column } from 'typeorm';\n\n/**\n * Input for creating Allocation\n */\n@InputType()\nexport class CreateAllocationInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field()\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting collection of allocations\n */\n@InputType()\nexport class GetAllocationsInput {\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting specific allocation\n */\n@InputType()\nexport class GetAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for updating specific allocation\n */\n@InputType()\nexport class UpdateAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for deleting specific allocation\n */\n@InputType()\nexport class DeleteAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if specific allocation exists\n */\n@InputType()\nexport class AllocationExistsInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if allocation name exists\n */\n@InputType()\nexport class AllocationNameExistsInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AllocationModule.html":{"url":"modules/AllocationModule.html","title":"module - AllocationModule","body":"\n                   \n\n\n\n\n    Modules\n    AllocationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AllocationModule\n\n\n\ncluster_AllocationModule_providers\n\n\n\ncluster_AllocationModule_exports\n\n\n\n\nAllocationService \n\nAllocationService \n\n\n\nAllocationModule\n\nAllocationModule\n\nAllocationService  -->\n\nAllocationModule->AllocationService \n\n\n\n\n\nAllocationRepository\n\nAllocationRepository\n\nAllocationModule -->\n\nAllocationRepository->AllocationModule\n\n\n\n\n\nAllocationService\n\nAllocationService\n\nAllocationModule -->\n\nAllocationService->AllocationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/allocation/allocation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AllocationRepository\n                        \n                        \n                            AllocationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AllocationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AllocationService } from 'allocation/allocation.service';\nimport { CustomerModule } from 'customer/customer.module';\nimport { Allocation } from './allocation.entity';\nimport { AllocationRepository } from './allocation.repository';\nimport { AllocationResolver } from './allocation.resolver';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Allocation]),\n    forwardRef(() => CustomerModule),\n  ],\n  providers: [AllocationService, AllocationResolver, AllocationRepository],\n  exports: [AllocationService],\n})\nexport class AllocationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllocationNameExistsInput.html":{"url":"classes/AllocationNameExistsInput.html","title":"class - AllocationNameExistsInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllocationNameExistsInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/dto/allocation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for checking if allocation name exists\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                customerId\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:191\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:185\n                        \n                    \n\n            \n                \n                    Allocation Name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Column } from 'typeorm';\n\n/**\n * Input for creating Allocation\n */\n@InputType()\nexport class CreateAllocationInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field()\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting collection of allocations\n */\n@InputType()\nexport class GetAllocationsInput {\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting specific allocation\n */\n@InputType()\nexport class GetAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for updating specific allocation\n */\n@InputType()\nexport class UpdateAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for deleting specific allocation\n */\n@InputType()\nexport class DeleteAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if specific allocation exists\n */\n@InputType()\nexport class AllocationExistsInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if allocation name exists\n */\n@InputType()\nexport class AllocationNameExistsInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AllocationRepository.html":{"url":"injectables/AllocationRepository.html","title":"injectable - AllocationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AllocationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/allocation.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Allocation Repository\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                repository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/allocation/allocation.repository.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for Allocation Repository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Data source injected\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createAllocationInput: CreateAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.repository.ts:32\n                \n            \n\n\n            \n                \n                    Creates an allocation in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createAllocationInput\n                                    \n                                                CreateAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Allocation\n\n                    \n                    \n                        Allocation created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(deleteAllocationInput: DeleteAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.repository.ts:83\n                \n            \n\n\n            \n                \n                    Deletes an allocation in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    deleteAllocationInput\n                                    \n                                                DeleteAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(getAllocationsInput: GetAllocationsInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.repository.ts:50\n                \n            \n\n\n            \n                \n                    Finds all allocations in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getAllocationsInput\n                                    \n                                                GetAllocationsInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A collection of allocations found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(getAllocationInput: GetAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.repository.ts:59\n                \n            \n\n\n            \n                \n                    Finds a single allocation in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getAllocationInput\n                                    \n                                                GetAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Allocation found or null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(allocation: Allocation)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.repository.ts:41\n                \n            \n\n\n            \n                \n                    Saves an allocation in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    allocation\n                                    \n                                                Allocation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Allocation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Allocation saved\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updateAllocationInput: UpdateAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.repository.ts:68\n                \n            \n\n\n            \n                \n                    Updates an allocation in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updateAllocationInput\n                                    \n                                                UpdateAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        repository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.repository.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { Allocation } from './allocation.entity';\nimport {\n  CreateAllocationInput,\n  DeleteAllocationInput,\n  GetAllocationInput,\n  GetAllocationsInput,\n  UpdateAllocationInput,\n} from './dto/allocation.dto';\n\n/**\n * Allocation Repository\n */\n@Injectable()\nexport class AllocationRepository {\n  private repository: Repository;\n\n  /**\n   * Constructor for Allocation Repository\n   * @param dataSource Data source injected\n   */\n  constructor(private dataSource: DataSource) {\n    this.repository = this.dataSource.getRepository(Allocation);\n  }\n\n  /**\n   * Creates an allocation in the database\n   * @param createAllocationInput Input\n   * @returns Allocation created\n   */\n  create(createAllocationInput: CreateAllocationInput): Allocation {\n    return this.repository.create(createAllocationInput);\n  }\n\n  /**\n   * Saves an allocation in the database\n   * @param allocation Allocation\n   * @returns Allocation saved\n   */\n  async save(allocation: Allocation): Promise {\n    return await this.repository.save(allocation);\n  }\n\n  /**\n   * Finds all allocations in the database\n   * @param getAllocationsInput Input\n   * @returns A collection of allocations found\n   */\n  async find(getAllocationsInput: GetAllocationsInput): Promise {\n    return await this.repository.findBy(getAllocationsInput);\n  }\n\n  /**\n   * Finds a single allocation in the database\n   * @param getAllocationInput Input\n   * @returns Allocation found or null\n   */\n  async findOne(getAllocationInput: GetAllocationInput): Promise {\n    return await this.repository.findOneBy(getAllocationInput);\n  }\n\n  /**\n   * Updates an allocation in the database\n   * @param updateAllocationInput Input\n   * @returns void\n   */\n  async update(updateAllocationInput: UpdateAllocationInput) {\n    await this.repository.update(\n      {\n        id: updateAllocationInput.id,\n        customerId: updateAllocationInput.customerId,\n      },\n      updateAllocationInput,\n    );\n  }\n\n  /**\n   * Deletes an allocation in the database\n   * @param deleteAllocationInput Input\n   * @returns void\n   */\n  async delete(deleteAllocationInput: DeleteAllocationInput) {\n    await this.repository.delete(deleteAllocationInput);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllocationResolver.html":{"url":"classes/AllocationResolver.html","title":"class - AllocationResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllocationResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/allocation.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                Allocation Resolver\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                allocations\n                            \n                            \n                                allocationsTotalAmount\n                            \n                            \n                                createAllocation\n                            \n                            \n                                customer\n                            \n                            \n                                deleteAllocation\n                            \n                            \n                                updateAllocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(allocationService: AllocationService)\n                    \n                \n                        \n                            \n                                Defined in src/allocation/allocation.resolver.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for allocation resolver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        allocationService\n                                                  \n                                                        \n                                                                        AllocationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Injected service for resolver\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        allocations\n                        \n                    \n                \n            \n            \n                \nallocations(getAllocationsInput: GetAllocationsInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/allocation/allocation.resolver.ts:48\n                \n            \n\n\n            \n                \n                    Gets all allocations related to a Customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getAllocationsInput\n                                    \n                                                GetAllocationsInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Collection of allocations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allocationsTotalAmount\n                        \n                    \n                \n            \n            \n                \nallocationsTotalAmount(getAllocationsInput: GetAllocationsInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/allocation/allocation.resolver.ts:84\n                \n            \n\n\n            \n                \n                    Sum all allocations amounts of a Customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getAllocationsInput\n                                    \n                                                GetAllocationsInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Sum of allocations amounts\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createAllocation\n                        \n                    \n                \n            \n            \n                \ncreateAllocation(createAllocationInput: CreateAllocationInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/allocation/allocation.resolver.ts:36\n                \n            \n\n\n            \n                \n                    Creates an allocation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createAllocationInput\n                                    \n                                                CreateAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Allocation created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customer\n                        \n                    \n                \n            \n            \n                \ncustomer(allocation: Allocation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/allocation/allocation.resolver.ts:98\n                \n            \n\n\n            \n                \n                    Gets customer related to an allocation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    allocation\n                                    \n                                                Allocation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Allocation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Customer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAllocation\n                        \n                    \n                \n            \n            \n                \ndeleteAllocation(deleteAllocationInput: DeleteAllocationInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/allocation/allocation.resolver.ts:72\n                \n            \n\n\n            \n                \n                    Deletes an allocation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    deleteAllocationInput\n                                    \n                                                DeleteAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        True if deletion was sucessfull\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAllocation\n                        \n                    \n                \n            \n            \n                \nupdateAllocation(updateAllocationInput: UpdateAllocationInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/allocation/allocation.resolver.ts:60\n                \n            \n\n\n            \n                \n                    Updates an allocations\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateAllocationInput\n                                    \n                                                UpdateAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updated allocation\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Query,\n  Mutation,\n  Args,\n  Parent,\n  ResolveField,\n} from '@nestjs/graphql';\nimport { Customer } from 'customer/customer.entity';\nimport { Allocation } from './allocation.entity';\nimport { AllocationService } from './allocation.service';\nimport {\n  CreateAllocationInput,\n  DeleteAllocationInput,\n  GetAllocationsInput,\n  UpdateAllocationInput,\n} from './dto/allocation.dto';\n\n/**\n * Allocation Resolver\n */\n@Resolver(() => Allocation)\nexport class AllocationResolver {\n  /**\n   * Constructor for allocation resolver\n   * @param allocationService Injected service for resolver\n   */\n  constructor(private allocationService: AllocationService) {}\n\n  /**\n   * Creates an allocation\n   * @param createAllocationInput Input\n   * @returns Allocation created\n   */\n  @Mutation(() => Allocation)\n  createAllocation(\n    @Args('createAllocationInput') createAllocationInput: CreateAllocationInput,\n  ): Promise {\n    return this.allocationService.createAllocation(createAllocationInput);\n  }\n\n  /**\n   * Gets all allocations related to a Customer\n   * @param getAllocationsInput Input\n   * @returns Collection of allocations\n   */\n  @Query(() => [Allocation])\n  allocations(\n    @Args('getAllocationsInput') getAllocationsInput: GetAllocationsInput,\n  ): Promise {\n    return this.allocationService.getAllocations(getAllocationsInput);\n  }\n\n  /**\n   * Updates an allocations\n   * @param getAllocationsInput Input\n   * @returns Updated allocation\n   */\n  @Mutation(() => Allocation)\n  updateAllocation(\n    @Args('updateAllocationInput') updateAllocationInput: UpdateAllocationInput,\n  ): Promise {\n    return this.allocationService.updateAllocation(updateAllocationInput);\n  }\n\n  /**\n   * Deletes an allocation\n   * @param getAllocationsInput Input\n   * @returns True if deletion was sucessfull\n   */\n  @Mutation(() => Boolean)\n  deleteAllocation(\n    @Args('deleteAllocationInput') deleteAllocationInput: DeleteAllocationInput,\n  ): Promise {\n    return this.allocationService.deleteAllocation(deleteAllocationInput);\n  }\n\n  /**\n   * Sum all allocations amounts of a Customer\n   * @param getAllocationsInput Input\n   * @returns Sum of allocations amounts\n   */\n  @Query(() => Number)\n  allocationsTotalAmount(\n    @Args('sumAllocationsInput') getAllocationsInput: GetAllocationsInput,\n  ): Promise {\n    return this.allocationService.getAllocationsTotalAmount(\n      getAllocationsInput,\n    );\n  }\n\n  /**\n   * Gets customer related to an allocation\n   * @param allocation Allocation\n   * @returns Customer\n   */\n  @ResolveField(() => Customer)\n  customer(@Parent() allocation: Allocation): Promise {\n    return this.allocationService.getCustomer(allocation.customerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AllocationService.html":{"url":"injectables/AllocationService.html","title":"injectable - AllocationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AllocationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/allocation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Allocation Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allocationExists\n                            \n                            \n                                    Async\n                                createAllocation\n                            \n                            \n                                    Async\n                                deleteAllocation\n                            \n                            \n                                    Async\n                                getAllocation\n                            \n                            \n                                    Async\n                                getAllocations\n                            \n                            \n                                    Async\n                                getAllocationsTotalAmount\n                            \n                            \n                                    Async\n                                getCustomer\n                            \n                            \n                                    Async\n                                nameExists\n                            \n                            \n                                    Async\n                                updateAllocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(allocationRepository: AllocationRepository, customerService: CustomerService)\n                    \n                \n                        \n                            \n                                Defined in src/allocation/allocation.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for Allocation Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        allocationRepository\n                                                  \n                                                        \n                                                                        AllocationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Injected Allocation Repository\n\n                                                        \n                                                \n                                                \n                                                        customerService\n                                                  \n                                                        \n                                                                        CustomerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        allocationExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    allocationExists(allocationExistsInput: AllocationExistsInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:215\n                \n            \n\n\n            \n                \n                    Checks if allocation exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    allocationExistsInput\n                                    \n                                                AllocationExistsInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if allocation exists, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAllocation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAllocation(createAllocationInput: CreateAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:42\n                \n            \n\n\n            \n                \n                    Creates an allocation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createAllocationInput\n                                    \n                                                CreateAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Allocation created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAllocation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllocation(deleteAllocationInput: DeleteAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:162\n                \n            \n\n\n            \n                \n                    Deletes an allocation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    deleteAllocationInput\n                                    \n                                                DeleteAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if deletion was sucessfull\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllocation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllocation(getAllocationInput: GetAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:105\n                \n            \n\n\n            \n                \n                    Gets an allocation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getAllocationInput\n                                    \n                                                GetAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An allocation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllocations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllocations(getAllocationsInput: GetAllocationsInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:87\n                \n            \n\n\n            \n                \n                    Gets all allocations\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getAllocationsInput\n                                    \n                                                GetAllocationsInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Collection of allocations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllocationsTotalAmount\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllocationsTotalAmount(getAllocationsInput: GetAllocationsInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:197\n                \n            \n\n\n            \n                \n                    Sum all allocations amounts\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getAllocationsInput\n                                    \n                                                GetAllocationsInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Sum of allocations amounts\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCustomer(customerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:245\n                \n            \n\n\n            \n                \n                    Gets a customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Customer ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A customer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        nameExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    nameExists(allocationNameExistsInput: AllocationNameExistsInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:230\n                \n            \n\n\n            \n                \n                    Checks if allocation name exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    allocationNameExistsInput\n                                    \n                                                AllocationNameExistsInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if allocation name exists, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAllocation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllocation(updateAllocationInput: UpdateAllocationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/allocation/allocation.service.ts:123\n                \n            \n\n\n            \n                \n                    Updates an allocation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updateAllocationInput\n                                    \n                                                UpdateAllocationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Allocation updated\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/allocation/allocation.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, Logger } from '@nestjs/common';\nimport { Allocation } from 'allocation/allocation.entity';\nimport {\n  AllocationExistsInput,\n  AllocationNameExistsInput,\n  CreateAllocationInput,\n  DeleteAllocationInput,\n  GetAllocationInput,\n  GetAllocationsInput,\n  UpdateAllocationInput,\n} from './dto/allocation.dto';\nimport { AllocationRepository } from './allocation.repository';\nimport { ValidationError } from 'apollo-server-express';\nimport { CustomerService } from 'customer/customer.service';\nimport { Customer } from 'customer/customer.entity';\n\n/**\n * Allocation Service\n */\n@Injectable()\nexport class AllocationService {\n  private logger: Logger;\n\n  /**\n   * Constructor for Allocation Service\n   * @param allocationRepository Injected Allocation Repository\n   */\n  constructor(\n    @Inject(AllocationRepository)\n    private allocationRepository: AllocationRepository,\n    @Inject(forwardRef(() => CustomerService))\n    private customerService: CustomerService,\n  ) {\n    this.logger = new Logger();\n  }\n\n  /**\n   * Creates an allocation\n   * @param createAllocationInput Input\n   * @returns Allocation created\n   */\n  async createAllocation(\n    createAllocationInput: CreateAllocationInput,\n  ): Promise {\n    const customerExists = await this.customerService.customerExists({\n      id: createAllocationInput.customerId,\n    });\n\n    if (!customerExists)\n      throw new ValidationError(\n        `Customer with id: '${createAllocationInput.customerId}' doesn't exists.`,\n      );\n\n    const allocationNameExists = await this.nameExists(createAllocationInput);\n\n    if (allocationNameExists)\n      throw new ValidationError(\n        `Allocation '${createAllocationInput.name}' already exists for customer ${createAllocationInput.customerId}.`,\n      );\n\n    let allocation: Allocation;\n\n    try {\n      allocation = this.allocationRepository.create(createAllocationInput);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while creating allocation with name: ${createAllocationInput.name} in Allocation Table`,\n      );\n    }\n\n    try {\n      return this.allocationRepository.save(allocation);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while saving allocation with name: ${allocation.name} in Allocation Table`,\n      );\n    }\n  }\n\n  /**\n   * Gets all allocations\n   * @param getAllocationsInput Input\n   * @returns Collection of allocations\n   */\n  async getAllocations(\n    getAllocationsInput: GetAllocationsInput,\n  ): Promise {\n    try {\n      return this.allocationRepository.find(getAllocationsInput);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while retrieving allocations with customerId: ${getAllocationsInput.customerId} in Allocation Table`,\n      );\n    }\n  }\n\n  /**\n   * Gets an allocation\n   * @param getAllocationInput Input\n   * @returns An allocation\n   */\n  async getAllocation(\n    getAllocationInput: GetAllocationInput,\n  ): Promise {\n    try {\n      return this.allocationRepository.findOne(getAllocationInput);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while retrieving allocation with name: ${getAllocationInput.name} in Allocation Table`,\n      );\n    }\n  }\n\n  /**\n   * Updates an allocation\n   * @param updateAllocationInput input\n   * @returns Allocation updated\n   */\n  async updateAllocation(\n    updateAllocationInput: UpdateAllocationInput,\n  ): Promise {\n    const customerExists = await this.customerService.customerExists({\n      id: updateAllocationInput.customerId,\n    });\n\n    if (!customerExists)\n      throw new ValidationError(\n        `Customer with id: '${updateAllocationInput.customerId}' doesn't exists.`,\n      );\n\n    const allocationExists = await this.allocationExists({\n      customerId: updateAllocationInput.customerId,\n      id: updateAllocationInput.id,\n    });\n\n    if (!allocationExists)\n      throw new ValidationError(\n        `Allocation with id: '${updateAllocationInput.id}' doesn't exists.`,\n      );\n\n    try {\n      await this.allocationRepository.update(updateAllocationInput);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while updating allocation with name: ${updateAllocationInput.name} in Allocation Table`,\n      );\n    }\n\n    return this.getAllocation(updateAllocationInput);\n  }\n\n  /**\n   * Deletes an allocation\n   * @param deleteAllocationInput Input\n   * @returns true if deletion was sucessfull\n   */\n  async deleteAllocation(\n    deleteAllocationInput: DeleteAllocationInput,\n  ): Promise {\n    const customerExists = await this.customerService.customerExists({\n      id: deleteAllocationInput.customerId,\n    });\n\n    if (!customerExists)\n      throw new ValidationError(\n        `Customer with id: '${deleteAllocationInput.customerId}' doesn't exists.`,\n      );\n\n    const allocationExists = await this.allocationExists(deleteAllocationInput);\n\n    if (!allocationExists)\n      throw new ValidationError(\n        `Allocation with id: '${deleteAllocationInput.id}' doesn't exists.`,\n      );\n\n    try {\n      await this.allocationRepository.delete(deleteAllocationInput);\n      return true;\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while deleting allocation with id: ${deleteAllocationInput.id} in Allocation Table`,\n      );\n    }\n  }\n\n  /**\n   * Sum all allocations amounts\n   * @param getAllocationsInput Input\n   * @returns Sum of allocations amounts\n   */\n  async getAllocationsTotalAmount(\n    getAllocationsInput: GetAllocationsInput,\n  ): Promise {\n    const allocations = await this.getAllocations(getAllocationsInput);\n    let sum = 0;\n\n    allocations.forEach((a) => {\n      sum += a.amount;\n    });\n\n    return sum;\n  }\n\n  /**\n   * Checks if allocation exists\n   * @param allocationExistsInput Input\n   * @returns true if allocation exists, false otherwise\n   */\n  async allocationExists(\n    allocationExistsInput: AllocationExistsInput,\n  ): Promise {\n    const allocations = await this.allocationRepository.find(\n      allocationExistsInput,\n    );\n    if (allocations.length > 0) return true;\n    return false;\n  }\n\n  /**\n   * Checks if allocation name exists\n   * @param allocationExistsInput Input\n   * @returns true if allocation name exists, false otherwise\n   */\n  async nameExists(\n    allocationNameExistsInput: AllocationNameExistsInput,\n  ): Promise {\n    const allocations = await this.allocationRepository.find(\n      allocationNameExistsInput,\n    );\n    if (allocations.length > 0) return true;\n    return false;\n  }\n\n  /**\n   * Gets a customer\n   * @param customerId Customer ID\n   * @returns A customer\n   */\n  async getCustomer(customerId: number): Promise {\n    return await this.customerService.getCustomer({\n      id: customerId,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAllocationModule\n\nAllocationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAllocationModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AllocationModule\n                        \n                        \n                            CustomerModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Allocation } from './allocation/allocation.entity';\nimport { AllocationModule } from './allocation/allocation.module';\nimport { Customer } from './customer/customer.entity';\nimport { CustomerModule } from './customer/customer.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      username: 'luisribeiro',\n      password: 'luisribeiro',\n      database: 'assetallocator',\n      entities: [Allocation, Customer],\n      synchronize: true,\n    }),\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n      formatError: (error) => {\n        return new Error(error.message);\n      },\n    }),\n    AllocationModule,\n    CustomerModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAllocationInput.html":{"url":"classes/CreateAllocationInput.html","title":"class - CreateAllocationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAllocationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/dto/allocation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for creating Allocation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                customerId\n                            \n                            \n                                name\n                            \n                            \n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:19\n                        \n                    \n\n            \n                \n                    Allocation Amount\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:32\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:13\n                        \n                    \n\n            \n                \n                    Allocation Name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 3, scale: 2})@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:26\n                        \n                    \n\n            \n                \n                    Allocation Target Percentage\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Column } from 'typeorm';\n\n/**\n * Input for creating Allocation\n */\n@InputType()\nexport class CreateAllocationInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field()\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting collection of allocations\n */\n@InputType()\nexport class GetAllocationsInput {\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting specific allocation\n */\n@InputType()\nexport class GetAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for updating specific allocation\n */\n@InputType()\nexport class UpdateAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for deleting specific allocation\n */\n@InputType()\nexport class DeleteAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if specific allocation exists\n */\n@InputType()\nexport class AllocationExistsInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if allocation name exists\n */\n@InputType()\nexport class AllocationNameExistsInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCustomerInput.html":{"url":"classes/CreateCustomerInput.html","title":"class - CreateCustomerInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCustomerInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/dto/customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for creating Customer\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/dto/customer.dto.ts:12\n                        \n                    \n\n            \n                \n                    Customer username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\n\n/**\n * Input for creating Customer\n */\n@InputType()\nexport class CreateCustomerInput {\n  /**\n   * Customer username\n   */\n  @Field()\n  username: string;\n}\n\n/**\n * Input for getting a Customer\n */\n@InputType()\nexport class GetCustomerInput {\n  /**\n   * Customer ID\n   */\n  @Field(() => Int, { nullable: true })\n  id: number;\n}\n\n/**\n * Input for getting a Customer by username\n */\n@InputType()\nexport class GetCustomerByUsernameInput {\n  /**\n   * Customer username\n   */\n  @Field()\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Customer.html":{"url":"entities/Customer.html","title":"entity - Customer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Customer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Customer Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allocations\n                            \n                            \n                                id\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        allocations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Allocation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, allocation => allocation.customer)@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:37\n                        \n                    \n\n            \n                \n                    Allocations associated with Customer\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:23\n                        \n                    \n\n            \n                \n                    Customer ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:30\n                        \n                    \n\n            \n                \n                    Customer username\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  OneToMany,\n  Index,\n} from 'typeorm';\nimport { Field, ObjectType, Int } from '@nestjs/graphql';\nimport { Allocation } from 'allocation/allocation.entity';\n\n/**\n * Customer Entity\n */\n@ObjectType()\n@Entity()\n@Index(['username'], { unique: true })\nexport class Customer {\n  /**\n   * Customer ID\n   */\n  @PrimaryGeneratedColumn()\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer username\n   */\n  @Column()\n  @Field()\n  username: string;\n\n  /**\n   * Allocations associated with Customer\n   */\n  @OneToMany(() => Allocation, (allocation) => allocation.customer)\n  @Field(() => [Allocation], { nullable: true })\n  allocations?: Allocation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nCustomerModule -->\n\nCustomerRepository->CustomerModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerRepository\n                        \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AllocationModule } from 'allocation/allocation.module';\nimport { CustomerService } from 'customer/customer.service';\nimport { Customer } from './customer.entity';\nimport { CustomerRepository } from './customer.repository';\nimport { CustomerResolver } from './customer.resolver';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Customer]),\n    forwardRef(() => AllocationModule),\n  ],\n  providers: [CustomerService, CustomerResolver, CustomerRepository],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerRepository.html":{"url":"injectables/CustomerRepository.html","title":"injectable - CustomerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Customer Repository\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                repository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.repository.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for Customer Repository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Data source injected\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCustomerInput: CreateCustomerInput)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.repository.ts:30\n                \n            \n\n\n            \n                \n                    Creates a customer in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createCustomerInput\n                                    \n                                                CreateCustomerInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Customer\n\n                    \n                    \n                        Customer created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(getCustomerInput: GetCustomerInput | GetCustomerByUsernameInput)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.repository.ts:56\n                \n            \n\n\n            \n                \n                    Finds a single customer in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getCustomerInput\n                                    \n                                                GetCustomerInput | GetCustomerByUsernameInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Customer found or null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.repository.ts:47\n                \n            \n\n\n            \n                \n                    Finds all customers in the database\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A collection of customers found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(customer: Customer)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.repository.ts:39\n                \n            \n\n\n            \n                \n                    Saves a customer in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                Customer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Customer\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Customer saved\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        repository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.repository.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { Customer } from './customer.entity';\nimport {\n  CreateCustomerInput,\n  GetCustomerByUsernameInput,\n  GetCustomerInput,\n} from './dto/customer.dto';\n\n/**\n * Customer Repository\n */\n@Injectable()\nexport class CustomerRepository {\n  private repository: Repository;\n\n  /**\n   * Constructor for Customer Repository\n   * @param dataSource Data source injected\n   */\n  constructor(private dataSource: DataSource) {\n    this.repository = this.dataSource.getRepository(Customer);\n  }\n\n  /**\n   * Creates a customer in the database\n   * @param createCustomerInput Input\n   * @returns Customer created\n   */\n  create(createCustomerInput: CreateCustomerInput): Customer {\n    return this.repository.create(createCustomerInput);\n  }\n\n  /**\n   * Saves a customer in the database\n   * @param customer Customer\n   * @returns Customer saved\n   */\n  async save(customer: Customer): Promise {\n    return await this.repository.save(customer);\n  }\n\n  /**\n   * Finds all customers in the database\n   * @returns A collection of customers found\n   */\n  async findAll(): Promise {\n    return await this.repository.find();\n  }\n\n  /**\n   * Finds a single customer in the database\n   * @param getCustomerInput Input\n   * @returns Customer found or null\n   */\n  async find(\n    getCustomerInput: GetCustomerInput | GetCustomerByUsernameInput,\n  ): Promise {\n    return await this.repository.findOneBy(getCustomerInput);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomerResolver.html":{"url":"classes/CustomerResolver.html","title":"class - CustomerResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomerResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                Customer Resolver\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allocations\n                            \n                            \n                                createCustomer\n                            \n                            \n                                    Async\n                                customer\n                            \n                            \n                                customers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerService: CustomerService)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.resolver.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for customer resolver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerService\n                                                  \n                                                        \n                                                                        CustomerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        allocations\n                        \n                    \n                \n            \n            \n                \n                    \n                    allocations(customer: Customer)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(undefined)\n                \n            \n\n            \n                \n                    Defined in src/customer/customer.resolver.ts:70\n                \n            \n\n\n            \n                \n                    Gets allcations related to customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                Customer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Customer\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Collection of Allocations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createCustomer\n                        \n                    \n                \n            \n            \n                \ncreateCustomer(createCustomerInput: CreateCustomerInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/customer/customer.resolver.ts:32\n                \n            \n\n\n            \n                \n                    Creates a customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCustomerInput\n                                    \n                                                CreateCustomerInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Customer created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        customer\n                        \n                    \n                \n            \n            \n                \n                    \n                    customer(getCustomerInput: GetCustomerInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/customer/customer.resolver.ts:53\n                \n            \n\n\n            \n                \n                    Gets a specific customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getCustomerInput\n                                    \n                                                GetCustomerInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Customer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customers\n                        \n                    \n                \n            \n            \n                \ncustomers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/customer/customer.resolver.ts:43\n                \n            \n\n\n            \n                \n                    Gets all customers\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Collection of customers\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Query,\n  Mutation,\n  Args,\n  Parent,\n  ResolveField,\n} from '@nestjs/graphql';\nimport { Allocation } from 'allocation/allocation.entity';\nimport { ValidationError } from 'apollo-server-express';\nimport { Customer } from './customer.entity';\nimport { CustomerService } from './customer.service';\nimport { CreateCustomerInput, GetCustomerInput } from './dto/customer.dto';\n\n/**\n * Customer Resolver\n */\n@Resolver(() => Customer)\nexport class CustomerResolver {\n  /**\n   * Constructor for customer resolver\n   * @param allocationService Injected service for customer\n   */\n  constructor(private customerService: CustomerService) {}\n\n  /**\n   * Creates a customer\n   * @param createAllocationInput Input\n   * @returns Customer created\n   */\n  @Mutation(() => Customer)\n  createCustomer(\n    @Args('createCustomerInput') createCustomerInput: CreateCustomerInput,\n  ): Promise {\n    return this.customerService.createCustomer(createCustomerInput);\n  }\n\n  /**\n   * Gets all customers\n   * @returns Collection of customers\n   */\n  @Query(() => [Customer])\n  customers(): Promise {\n    return this.customerService.getAllCustomers();\n  }\n\n  /**\n   * Gets a specific customer\n   * @param getCustomerInput Input\n   * @returns Customer\n   */\n  @Query(() => Customer)\n  async customer(\n    @Args('getCustomerInput') getCustomerInput: GetCustomerInput,\n  ): Promise {\n    const customer = await this.customerService.getCustomer(getCustomerInput);\n    if (!customer)\n      throw new ValidationError(\n        `Customer id ${getCustomerInput.id} doesn't exist`,\n      );\n    return customer;\n  }\n\n  /**\n   * Gets allcations related to customer\n   * @param customer Customer\n   * @returns Collection of Allocations\n   */\n  @ResolveField(() => [Allocation])\n  async allocations(@Parent() customer: Customer): Promise {\n    return this.customerService.getAllocations(customer.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Customer Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCustomer\n                            \n                            \n                                    Async\n                                customerExists\n                            \n                            \n                                    Async\n                                getAllCustomers\n                            \n                            \n                                    Async\n                                getAllocations\n                            \n                            \n                                    Async\n                                getCustomer\n                            \n                            \n                                    Async\n                                usernameExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: CustomerRepository, allocationService: AllocationService)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for Customer Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Injected Customer Repository\n\n                                                        \n                                                \n                                                \n                                                        allocationService\n                                                  \n                                                        \n                                                                        AllocationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCustomer(createCustomerInput: CreateCustomerInput)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:38\n                \n            \n\n\n            \n                \n                    Creates a customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createCustomerInput\n                                    \n                                                CreateCustomerInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Customer created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        customerExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    customerExists(getCustomerInput: GetCustomerInput)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:106\n                \n            \n\n\n            \n                \n                    Checks if customer exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getCustomerInput\n                                    \n                                                GetCustomerInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if customer exists, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllCustomers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllCustomers()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:72\n                \n            \n\n\n            \n                \n                    Gets all customers\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Collection of customers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllocations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllocations(customerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:132\n                \n            \n\n\n            \n                \n                    Gets all allocations related to a customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Customer ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Collection of allocations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCustomer(getCustomerInput: GetCustomerInput)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:86\n                \n            \n\n\n            \n                \n                    Gets a customer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getCustomerInput\n                                    \n                                                GetCustomerInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A customer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        usernameExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    usernameExists(getCustomerByUsernameInput: GetCustomerByUsernameInput)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:117\n                \n            \n\n\n            \n                \n                    Checks if username exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getCustomerByUsernameInput\n                                    \n                                                GetCustomerByUsernameInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if username exists, false otherwise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, Logger } from '@nestjs/common';\nimport { Customer } from 'customer/customer.entity';\nimport {\n  CreateCustomerInput,\n  GetCustomerInput,\n  GetCustomerByUsernameInput,\n} from './dto/customer.dto';\nimport { CustomerRepository } from './customer.repository';\nimport { ValidationError } from 'apollo-server-express';\nimport { Allocation } from 'allocation/allocation.entity';\nimport { AllocationService } from 'allocation/allocation.service';\n\n/**\n * Customer Service\n */\n@Injectable()\nexport class CustomerService {\n  private logger: Logger;\n\n  /**\n   * Constructor for Customer Service\n   * @param customerRepository Injected Customer Repository\n   */\n  constructor(\n    @Inject(CustomerRepository)\n    private customerRepository: CustomerRepository,\n    @Inject(forwardRef(() => AllocationService))\n    private allocationService: AllocationService,\n  ) {\n    this.logger = new Logger();\n  }\n\n  /**\n   * Creates a customer\n   * @param createCustomerInput Input\n   * @returns Customer created\n   */\n  async createCustomer(\n    createCustomerInput: CreateCustomerInput,\n  ): Promise {\n    const usernameExists = await this.usernameExists(createCustomerInput);\n    if (usernameExists)\n      throw new ValidationError(\n        `Customer with username: '${createCustomerInput.username}' already exists.`,\n      );\n\n    let customer: Customer;\n\n    try {\n      customer = this.customerRepository.create(createCustomerInput);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while creating customer with username: '${createCustomerInput.username}' in Customer Table`,\n      );\n    }\n\n    try {\n      return this.customerRepository.save(customer);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while saving customer with username: '${customer.username}' in Customer Table`,\n      );\n    }\n  }\n\n  /**\n   * Gets all customers\n   * @returns Collection of customers\n   */\n  async getAllCustomers(): Promise {\n    try {\n      return this.customerRepository.findAll();\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(`Error while retrieving all customers in Customer Table`);\n    }\n  }\n\n  /**\n   * Gets a customer\n   * @param getCustomerInput Input\n   * @returns A customer\n   */\n  async getCustomer(getCustomerInput: GetCustomerInput): Promise {\n    let customer: Customer;\n\n    try {\n      customer = await this.customerRepository.find(getCustomerInput);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Error(\n        `Error while getting Customer with id: ${getCustomerInput.id} in Customer Table`,\n      );\n    }\n\n    return customer;\n  }\n\n  /**\n   * Checks if customer exists\n   * @param getCustomerInput Input\n   * @returns true if customer exists, false otherwise\n   */\n  async customerExists(getCustomerInput: GetCustomerInput): Promise {\n    const customer = await this.customerRepository.find(getCustomerInput);\n    if (customer) return true;\n    return false;\n  }\n\n  /**\n   * Checks if username exists\n   * @param getCustomerByUsernameInput Input\n   * @returns true if username exists, false otherwise\n   */\n  async usernameExists(\n    getCustomerByUsernameInput: GetCustomerByUsernameInput,\n  ): Promise {\n    const customer = await this.customerRepository.find(\n      getCustomerByUsernameInput,\n    );\n    if (customer) return true;\n    return false;\n  }\n\n  /**\n   * Gets all allocations related to a customer\n   * @param customerId Customer ID\n   * @returns Collection of allocations\n   */\n  async getAllocations(customerId: number): Promise {\n    return this.allocationService.getAllocations({\n      customerId: customerId,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteAllocationInput.html":{"url":"classes/DeleteAllocationInput.html","title":"class - DeleteAllocationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteAllocationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/dto/allocation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for deleting specific allocation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                customerId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:155\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:149\n                        \n                    \n\n            \n                \n                    Allocation ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Column } from 'typeorm';\n\n/**\n * Input for creating Allocation\n */\n@InputType()\nexport class CreateAllocationInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field()\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting collection of allocations\n */\n@InputType()\nexport class GetAllocationsInput {\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting specific allocation\n */\n@InputType()\nexport class GetAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for updating specific allocation\n */\n@InputType()\nexport class UpdateAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for deleting specific allocation\n */\n@InputType()\nexport class DeleteAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if specific allocation exists\n */\n@InputType()\nexport class AllocationExistsInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if allocation name exists\n */\n@InputType()\nexport class AllocationNameExistsInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllocationInput.html":{"url":"classes/GetAllocationInput.html","title":"class - GetAllocationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllocationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/dto/allocation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for getting specific allocation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                customerId\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:93\n                        \n                    \n\n            \n                \n                    Allocation Amount\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:81\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:75\n                        \n                    \n\n            \n                \n                    Allocation ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:87\n                        \n                    \n\n            \n                \n                    Allocation Name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 3, scale: 2})@Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:100\n                        \n                    \n\n            \n                \n                    Allocation Target Percentage\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Column } from 'typeorm';\n\n/**\n * Input for creating Allocation\n */\n@InputType()\nexport class CreateAllocationInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field()\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting collection of allocations\n */\n@InputType()\nexport class GetAllocationsInput {\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting specific allocation\n */\n@InputType()\nexport class GetAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for updating specific allocation\n */\n@InputType()\nexport class UpdateAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for deleting specific allocation\n */\n@InputType()\nexport class DeleteAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if specific allocation exists\n */\n@InputType()\nexport class AllocationExistsInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if allocation name exists\n */\n@InputType()\nexport class AllocationNameExistsInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllocationsInput.html":{"url":"classes/GetAllocationsInput.html","title":"class - GetAllocationsInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllocationsInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/dto/allocation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for getting collection of allocations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                customerId\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:50\n                        \n                    \n\n            \n                \n                    Allocation Amount\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:63\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:44\n                        \n                    \n\n            \n                \n                    Allocation Name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 3, scale: 2})@Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:57\n                        \n                    \n\n            \n                \n                    Allocation Target Percentage\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Column } from 'typeorm';\n\n/**\n * Input for creating Allocation\n */\n@InputType()\nexport class CreateAllocationInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field()\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting collection of allocations\n */\n@InputType()\nexport class GetAllocationsInput {\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting specific allocation\n */\n@InputType()\nexport class GetAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for updating specific allocation\n */\n@InputType()\nexport class UpdateAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for deleting specific allocation\n */\n@InputType()\nexport class DeleteAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if specific allocation exists\n */\n@InputType()\nexport class AllocationExistsInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if allocation name exists\n */\n@InputType()\nexport class AllocationNameExistsInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCustomerByUsernameInput.html":{"url":"classes/GetCustomerByUsernameInput.html","title":"class - GetCustomerByUsernameInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCustomerByUsernameInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/dto/customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for getting a Customer by username\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/dto/customer.dto.ts:36\n                        \n                    \n\n            \n                \n                    Customer username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\n\n/**\n * Input for creating Customer\n */\n@InputType()\nexport class CreateCustomerInput {\n  /**\n   * Customer username\n   */\n  @Field()\n  username: string;\n}\n\n/**\n * Input for getting a Customer\n */\n@InputType()\nexport class GetCustomerInput {\n  /**\n   * Customer ID\n   */\n  @Field(() => Int, { nullable: true })\n  id: number;\n}\n\n/**\n * Input for getting a Customer by username\n */\n@InputType()\nexport class GetCustomerByUsernameInput {\n  /**\n   * Customer username\n   */\n  @Field()\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCustomerInput.html":{"url":"classes/GetCustomerInput.html","title":"class - GetCustomerInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCustomerInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/dto/customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for getting a Customer\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/dto/customer.dto.ts:24\n                        \n                    \n\n            \n                \n                    Customer ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\n\n/**\n * Input for creating Customer\n */\n@InputType()\nexport class CreateCustomerInput {\n  /**\n   * Customer username\n   */\n  @Field()\n  username: string;\n}\n\n/**\n * Input for getting a Customer\n */\n@InputType()\nexport class GetCustomerInput {\n  /**\n   * Customer ID\n   */\n  @Field(() => Int, { nullable: true })\n  id: number;\n}\n\n/**\n * Input for getting a Customer by username\n */\n@InputType()\nexport class GetCustomerByUsernameInput {\n  /**\n   * Customer username\n   */\n  @Field()\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAllocationInput.html":{"url":"classes/UpdateAllocationInput.html","title":"class - UpdateAllocationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAllocationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allocation/dto/allocation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Input for updating specific allocation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                customerId\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:130\n                        \n                    \n\n            \n                \n                    Allocation Amount\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:118\n                        \n                    \n\n            \n                \n                    Customer ID associated with Allocation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:112\n                        \n                    \n\n            \n                \n                    Allocation ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:124\n                        \n                    \n\n            \n                \n                    Allocation Name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 3, scale: 2})@Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/allocation/dto/allocation.dto.ts:137\n                        \n                    \n\n            \n                \n                    Allocation Target Percentage\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Column } from 'typeorm';\n\n/**\n * Input for creating Allocation\n */\n@InputType()\nexport class CreateAllocationInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int)\n  amount: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field()\n  target: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting collection of allocations\n */\n@InputType()\nexport class GetAllocationsInput {\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for getting specific allocation\n */\n@InputType()\nexport class GetAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for updating specific allocation\n */\n@InputType()\nexport class UpdateAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n\n  /**\n   * Allocation Name\n   */\n  @Field({ nullable: true })\n  name?: string;\n\n  /**\n   * Allocation Amount\n   */\n  @Field(() => Int, { nullable: true })\n  amount?: number;\n\n  /**\n   * Allocation Target Percentage\n   */\n  @Column({ type: 'decimal', precision: 3, scale: 2 })\n  @Field({ nullable: true })\n  target?: number;\n}\n\n/**\n * Input for deleting specific allocation\n */\n@InputType()\nexport class DeleteAllocationInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if specific allocation exists\n */\n@InputType()\nexport class AllocationExistsInput {\n  /**\n   * Allocation ID\n   */\n  @Field(() => Int)\n  id: number;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n/**\n * Input for checking if allocation name exists\n */\n@InputType()\nexport class AllocationNameExistsInput {\n  /**\n   * Allocation Name\n   */\n  @Field()\n  name: string;\n\n  /**\n   * Customer ID associated with Allocation\n   */\n  @Field(() => Int)\n  customerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/allocation/allocation.entity.ts\n            \n            entity\n            Allocation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/allocation/allocation.entity.ts\n            \n            class\n            Allocation\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/allocation/allocation.repository.ts\n            \n            injectable\n            AllocationRepository\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/allocation/allocation.resolver.ts\n            \n            class\n            AllocationResolver\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/allocation/allocation.service.ts\n            \n            injectable\n            AllocationService\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/allocation/dto/allocation.dto.ts\n            \n            class\n            AllocationExistsInput\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/allocation/dto/allocation.dto.ts\n            \n            class\n            AllocationNameExistsInput\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/allocation/dto/allocation.dto.ts\n            \n            class\n            CreateAllocationInput\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/allocation/dto/allocation.dto.ts\n            \n            class\n            DeleteAllocationInput\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/allocation/dto/allocation.dto.ts\n            \n            class\n            GetAllocationInput\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/allocation/dto/allocation.dto.ts\n            \n            class\n            GetAllocationsInput\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/allocation/dto/allocation.dto.ts\n            \n            class\n            UpdateAllocationInput\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            Customer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            class\n            Customer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/customer/customer.repository.ts\n            \n            injectable\n            CustomerRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/customer/customer.resolver.ts\n            \n            class\n            CustomerResolver\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/customer/dto/customer.dto.ts\n            \n            class\n            CreateCustomerInput\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/customer/dto/customer.dto.ts\n            \n            class\n            GetCustomerByUsernameInput\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/customer/dto/customer.dto.ts\n            \n            class\n            GetCustomerInput\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @golevelup/ts-jest : ^0.3.4\n        \n            @nestjs/apollo : ^10.1.7\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/graphql : ^10.1.7\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            apollo-server-express : ^3.11.1\n        \n            class-validator : ^0.13.2\n        \n            graphql : ^16.6.0\n        \n            pg : ^8.8.0\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Entry point of nestjs application\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AllocationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AllocationModule\n\n\n\ncluster_AllocationModule_exports\n\n\n\ncluster_AllocationModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nAllocationService \n\nAllocationService \n\n\n\nAllocationModule\n\nAllocationModule\n\nAllocationService  -->\n\nAllocationModule->AllocationService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAllocationModule->AppModule\n\n\n\n\n\nAllocationRepository\n\nAllocationRepository\n\nAllocationModule -->\n\nAllocationRepository->AllocationModule\n\n\n\n\n\nAllocationService\n\nAllocationService\n\nAllocationModule -->\n\nAllocationService->AllocationModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nCustomerModule -->\n\nCustomerRepository->CustomerModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
